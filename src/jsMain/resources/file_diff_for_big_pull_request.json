{
  "fileDiffs": [
    {
      "rawTextOld": "import org.jetbrains.kotlin.gradle.dsl.KotlinJsCompile\n\nval ktorVersion = \"1.3.2\"\nval jgitVersion = \"5.7.0.202003110725-r\"\nval logbackVersion = \"1.2.3\"\nval jdbiVersion = \"3.12.2\"\n\n\n\nplugins {\n    kotlin(\"multiplatform\") version \"1.3.71\"\n    kotlin(\"plugin.serialization\") version \"1.3.71\"\n}\n\ngroup = \"io.btc\"\nversion = \"1.0.0\"\n\nrepositories {\n    maven(\"https://kotlin.bintray.com/kotlin-js-wrappers/\")\n    mavenCentral()\n    jcenter()\n}\n\nkotlin {\n    js {\n        browser {\n            testTask {\n                useKarma() {\n                    useChromeHeadless()\n                }\n            }\n        }\n        nodejs {\n            useCommonJs()\n        }\n    }\n\n    jvm {\n        val main by compilations.getting {\n            kotlinOptions {\n                jvmTarget = \"1.8\"\n            }\n        }\n        val test by compilations.getting {\n            kotlinOptions {\n                jvmTarget = \"1.8\"\n            }\n        }\n    }\n\n    tasks.named(\"compileKotlinJs\") {\n        this as KotlinJsCompile\n        kotlinOptions.moduleKind = \"commonjs\"\n    }\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(kotlin(\"stdlib-common\"))\n                implementation(\"io.ktor:ktor-client-core:$ktorVersion\")\n                implementation(\"io.ktor:ktor-client-json:$ktorVersion\")\n                implementation(\"io.ktor:ktor-client-serialization:$ktorVersion\")\n                implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.20.0\")\n            }\n        }\n        val commonTest by getting {\n            dependencies {\n                implementation(kotlin(\"test-common\"))\n                implementation(kotlin(\"test-annotations-common\"))\n            }\n        }\n\n        val jsMain by getting {\n            dependencies {\n                api(npm(\"text-encoding\", \"0.7.0\"))\n                api(npm(\"abort-controller\", \"3.0.0\"))\n                implementation(kotlin(\"stdlib-js\"))\n                implementation(\"io.ktor:ktor-client-serialization-js:$ktorVersion\")\n                implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.20.0\")\n                implementation(\"io.ktor:ktor-client-js:$ktorVersion\")\n                implementation(\"io.ktor:ktor-client-json-js:$ktorVersion\")\n                api(\"org.jetbrains.kotlinx:kotlinx-html-js:0.7.1\")\n\n                //React, React DOM + Wrappers\n                implementation(\"org.jetbrains:kotlin-react:16.13.0-pre.94-kotlin-1.3.70\")\n                implementation(\"org.jetbrains:kotlin-react-dom:16.13.0-pre.94-kotlin-1.3.70\")\n                implementation(npm(\"react\", \"16.13.1\"))\n                implementation(npm(\"react-dom\", \"16.13.1\"))\n                implementation(\"org.jetbrains:kotlin-styled:1.0.0-pre.94-kotlin-1.3.70\")\n                implementation(npm(\"styled-components\"))\n                implementation(npm(\"inline-style-prefixer\"))\n                // Components used only within React rendering (substituted out when using Atom)\n                implementation(npm(\"react-ace\", \"8.1.0\"))\n                implementation(npm(\"ace-builds\", \"~1.4.10\"))\n                // Material UI\n                implementation(npm(\"@material-ui/core\"))\n\n                /** Webpack */\n                implementation(npm(\"file-loader\", \"~6.0.0\"))\n            }\n        }\n\n        val jsTest by getting {\n            dependencies {\n                implementation(kotlin(\"test-js\"))\n            }\n        }\n\n        val jvmMain by getting {\n            dependencies {\n                implementation(kotlin(\"stdlib-jdk8\"))\n                /** Ktor and relatives */\n                implementation(\"io.ktor:ktor-client-cio:$ktorVersion\")\n                implementation(\"io.ktor:ktor-client-json-jvm:$ktorVersion\")\n                implementation(\"io.ktor:ktor-client-serialization-jvm:$ktorVersion\")\n                implementation(\"io.ktor:ktor-server-netty:$ktorVersion\")\n                implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0\")\n                implementation(\"io.ktor:ktor-jackson:$ktorVersion\")\n                /** Jgit */\n                implementation(\"org.eclipse.jgit:org.eclipse.jgit:$jgitVersion\")\n                /** Logs */\n                implementation(\"ch.qos.logback:logback-classic:$logbackVersion\")\n                /** Db */\n                implementation(\"org.xerial:sqlite-jdbc:3.30.1\")\n                implementation(\"org.jdbi:jdbi3-core:$jdbiVersion\")\n                implementation(\"org.jdbi:jdbi3-kotlin:$jdbiVersion\")\n                implementation(\"org.jdbi:jdbi3-kotlin-sqlobject:$jdbiVersion\")\n                implementation(\"org.jdbi:jdbi3-sqlite:$jdbiVersion\")\n            }\n        }\n\n        val jvmTest by getting {\n            dependencies {\n                implementation(kotlin(\"test\"))\n                implementation(kotlin(\"test-junit\"))\n                implementation(\"org.eclipse.jgit:org.eclipse.jgit.junit:$jgitVersion\")\n\n                /** Ktor and relatives */\n                implementation(\"io.ktor:ktor-server-test-host:$ktorVersion\")\n            }\n        }\n\n    }\n}",
      "rawTextNew": "import org.jetbrains.kotlin.gradle.dsl.KotlinJsCompile\n\nval ktorVersion = \"1.3.2\"\nval jgitVersion = \"5.7.0.202003110725-r\"\nval logbackVersion = \"1.2.3\"\nval jdbiVersion = \"3.12.2\"\n\n\n\nplugins {\n    kotlin(\"multiplatform\") version \"1.3.71\"\n    kotlin(\"plugin.serialization\") version \"1.3.71\"\n}\n\ngroup = \"io.btc\"\nversion = \"1.0.0\"\n\nrepositories {\n    maven(\"https://kotlin.bintray.com/kotlin-js-wrappers/\")\n    mavenCentral()\n    jcenter()\n}\n\nkotlin {\n    js {\n        browser {\n            testTask {\n                useKarma() {\n                    useChromeHeadless()\n                }\n            }\n        }\n        nodejs {\n            useCommonJs()\n        }\n    }\n\n    jvm {\n        val main by compilations.getting {\n            kotlinOptions {\n                jvmTarget = \"1.8\"\n            }\n        }\n        val test by compilations.getting {\n            kotlinOptions {\n                jvmTarget = \"1.8\"\n            }\n        }\n    }\n\n    tasks.named(\"compileKotlinJs\") {\n        this as KotlinJsCompile\n        kotlinOptions.moduleKind = \"commonjs\"\n    }\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(kotlin(\"stdlib-common\"))\n                implementation(\"io.ktor:ktor-client-core:$ktorVersion\")\n                implementation(\"io.ktor:ktor-client-json:$ktorVersion\")\n                implementation(\"io.ktor:ktor-client-serialization:$ktorVersion\")\n                implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.20.0\")\n            }\n        }\n        val commonTest by getting {\n            dependencies {\n                implementation(kotlin(\"test-common\"))\n                implementation(kotlin(\"test-annotations-common\"))\n            }\n        }\n\n        val jsMain by getting {\n            dependencies {\n                api(npm(\"text-encoding\", \"0.7.0\"))\n                api(npm(\"abort-controller\", \"3.0.0\"))\n                implementation(kotlin(\"stdlib-js\"))\n                implementation(\"io.ktor:ktor-client-serialization-js:$ktorVersion\")\n                implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.20.0\")\n                implementation(\"io.ktor:ktor-client-js:$ktorVersion\")\n                implementation(\"io.ktor:ktor-client-json-js:$ktorVersion\")\n                api(\"org.jetbrains.kotlinx:kotlinx-html-js:0.7.1\")\n\n                //React, React DOM + Wrappers\n                implementation(\"org.jetbrains:kotlin-react:16.13.0-pre.94-kotlin-1.3.70\")\n                implementation(\"org.jetbrains:kotlin-react-dom:16.13.0-pre.94-kotlin-1.3.70\")\n                implementation(npm(\"react\", \"16.13.1\"))\n                implementation(npm(\"react-dom\", \"16.13.1\"))\n                implementation(\"org.jetbrains:kotlin-styled:1.0.0-pre.94-kotlin-1.3.70\")\n                implementation(npm(\"styled-components\"))\n                implementation(npm(\"inline-style-prefixer\"))\n                // Components used only within React rendering (substituted out when using Atom)\n                implementation(npm(\"react-ace\", \"8.1.0\"))\n                implementation(npm(\"ace-builds\", \"~1.4.10\"))\n                // Material UI\n                implementation(npm(\"@material-ui/core\"))\n\n                /** Webpack */\n                implementation(npm(\"file-loader\", \"~6.0.0\"))\n\n                /** Diff */\n                implementation(npm(\"diff\", \"~4.0.2\"))\n            }\n        }\n\n        val jsTest by getting {\n            dependencies {\n                implementation(kotlin(\"test-js\"))\n            }\n        }\n\n        val jvmMain by getting {\n            dependencies {\n                implementation(kotlin(\"stdlib-jdk8\"))\n                /** Ktor and relatives */\n                implementation(\"io.ktor:ktor-client-cio:$ktorVersion\")\n                implementation(\"io.ktor:ktor-client-json-jvm:$ktorVersion\")\n                implementation(\"io.ktor:ktor-client-serialization-jvm:$ktorVersion\")\n                implementation(\"io.ktor:ktor-server-netty:$ktorVersion\")\n                implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.20.0\")\n                implementation(\"io.ktor:ktor-serialization:$ktorVersion\")\n                /** Jgit */\n                implementation(\"org.eclipse.jgit:org.eclipse.jgit:$jgitVersion\")\n                /** Logs */\n                implementation(\"ch.qos.logback:logback-classic:$logbackVersion\")\n                /** Db */\n                implementation(\"org.xerial:sqlite-jdbc:3.30.1\")\n                implementation(\"org.jdbi:jdbi3-core:$jdbiVersion\")\n                implementation(\"org.jdbi:jdbi3-kotlin:$jdbiVersion\")\n                implementation(\"org.jdbi:jdbi3-kotlin-sqlobject:$jdbiVersion\")\n                implementation(\"org.jdbi:jdbi3-sqlite:$jdbiVersion\")\n            }\n        }\n\n        val jvmTest by getting {\n            dependencies {\n                implementation(kotlin(\"test\"))\n                implementation(kotlin(\"test-junit\"))\n                implementation(\"org.eclipse.jgit:org.eclipse.jgit.junit:$jgitVersion\")\n\n                /** Ktor and relatives */\n                implementation(\"io.ktor:ktor-server-test-host:$ktorVersion\")\n            }\n        }\n\n    }\n}",
      "diffChangeType": "MODIFY",
      "fileHeader": {
        "identifier": "5cc75da",
        "fileNewPath": "kotlin/build.gradle.kts",
        "fileOldPath": "kotlin/build.gradle.kts",
        "description": "diff --git a/kotlin/build.gradle.kts b/kotlin/build.gradle.kts\nindex ab49cec..5cc75da 100644\n--- a/kotlin/build.gradle.kts\n+++ b/kotlin/build.gradle.kts\n",
        "editList": [
          {
            "beginA": 99,
            "beginB": 99,
            "endA": 99,
            "endB": 102,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 3
          },
          {
            "beginA": 117,
            "beginB": 120,
            "endA": 118,
            "endB": 121,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          }
        ]
      }
    },
    {
      "rawTextOld": "const val APP_NAME = \"super-cr\"\nconst val CODE_REVIEW_TOOL_CACHE_DIRECTORY = \".$APP_NAME\"\nconst val HOME = \"HOME\"\n",
      "rawTextNew": "const val DEFAULT_PORT = 8081\nconst val APP_NAME = \"super-cr\"\nconst val CODE_REVIEW_TOOL_CACHE_DIRECTORY = \".$APP_NAME\"\nconst val HOME = \"HOME\"\n",
      "diffChangeType": "MODIFY",
      "fileHeader": {
        "identifier": "9bddd6c",
        "fileNewPath": "kotlin/src/commonMain/kotlin/Constants.kt",
        "fileOldPath": "kotlin/src/commonMain/kotlin/Constants.kt",
        "description": "diff --git a/kotlin/src/commonMain/kotlin/Constants.kt b/kotlin/src/commonMain/kotlin/Constants.kt\nindex 1c073cc..9bddd6c 100644\n--- a/kotlin/src/commonMain/kotlin/Constants.kt\n+++ b/kotlin/src/commonMain/kotlin/Constants.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 1,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 1
          }
        ]
      }
    },
    {
      "rawTextOld": "package codereview\n\nimport encodeToBase64\nimport kotlinx.serialization.Serializable\n\n\n@Serializable\ndata class Project(\n    val localPath: String,\n    val providerPath: String,\n    val name: String\n) {\n    val id = localPath.encodeToBase64()\n}\n",
      "rawTextNew": "package codereview\n\nimport kotlinx.serialization.Serializable\n\n\n@Serializable\ndata class Project(\n    val localPath: String,\n    val providerPath: String,\n    val name: String\n) {\n    /** TODO : Get encodeToBase64 to work */\n//    val id = localPath.encodeToBase64()\n    val id\n    get() = localPath.replace(\"/\", \"\")\n}\n",
      "diffChangeType": "MODIFY",
      "fileHeader": {
        "identifier": "a53bc02",
        "fileNewPath": "kotlin/src/commonMain/kotlin/codereview/Project.kt",
        "fileOldPath": "kotlin/src/commonMain/kotlin/codereview/Project.kt",
        "description": "diff --git a/kotlin/src/commonMain/kotlin/codereview/Project.kt b/kotlin/src/commonMain/kotlin/codereview/Project.kt\nindex 489ba12..a53bc02 100644\n--- a/kotlin/src/commonMain/kotlin/codereview/Project.kt\n+++ b/kotlin/src/commonMain/kotlin/codereview/Project.kt\n",
        "editList": [
          {
            "beginA": 2,
            "beginB": 2,
            "endA": 3,
            "endB": 2,
            "editType": "DELETE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 0
          },
          {
            "beginA": 12,
            "beginB": 11,
            "endA": 13,
            "endB": 15,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 4
          }
        ]
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "package codereview\n\nimport DEFAULT_PORT\nimport io.ktor.client.HttpClient\nimport io.ktor.client.request.HttpRequestBuilder\nimport io.ktor.client.request.header\nimport io.ktor.client.request.post\nimport io.ktor.client.request.request\nimport io.ktor.client.request.url\nimport io.ktor.client.statement.HttpResponse\nimport io.ktor.content.TextContent\nimport io.ktor.http.ContentType\nimport io.ktor.http.HttpHeaders\nimport io.ktor.http.HttpMethod\nimport io.ktor.http.HttpStatusCode\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\n\nclass SuperCrClient(\n    private val httpClient: HttpClient\n) {\n    companion object {\n        private val baseUrl = \"http://localhost:${DEFAULT_PORT}\"\n        private val json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true))\n//        private val json = io.ktor.client.features.json.defaultSerializer()\n    }\n\n    suspend fun getAllProjects(): List<Project> {\n        return httpClient.request<List<Project>>(buildRequest().apply {\n            url(\"$baseUrl/projects/_all\")\n            method = HttpMethod.Get\n        })\n    }\n\n    suspend fun addProject(project: Project): Boolean {\n        val response = httpClient.post<HttpResponse> {\n            body = project\n            header(HttpHeaders.ContentType, ContentType.Application.Json)\n            url(\"$baseUrl/projects\")\n        }\n        return when(response.status) {\n            HttpStatusCode.Created -> true\n            HttpStatusCode.InternalServerError -> false\n            HttpStatusCode.BadRequest -> false\n            else -> {\n                throw RuntimeException(\"Unhandled status code ${response.status}\")\n            }\n        }\n    }\n\n    private suspend fun buildRequest(): HttpRequestBuilder {\n        return HttpRequestBuilder().apply {\n            header(HttpHeaders.Accept, ContentType.Application.Json)\n        }\n    }\n    private suspend fun buildPostRequest(): HttpRequestBuilder {\n        return HttpRequestBuilder().apply {\n            header(HttpHeaders.Accept, ContentType.Application.Json)\n            header(HttpHeaders.ContentType, ContentType.Application.Json)\n        }\n    }\n}",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "5d0487b",
        "fileNewPath": "kotlin/src/commonMain/kotlin/codereview/SuperCrClient.kt",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/commonMain/kotlin/codereview/SuperCrClient.kt b/kotlin/src/commonMain/kotlin/codereview/SuperCrClient.kt\nnew file mode 100644\nindex 0000000..5d0487b\n--- /dev/null\n+++ b/kotlin/src/commonMain/kotlin/codereview/SuperCrClient.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 62,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 62
          }
        ]
      }
    },
    {
      "rawTextOld": "package git.provider\n\nimport auth.OauthClient\nimport io.ktor.client.HttpClient\nimport io.ktor.client.features.json.defaultSerializer\nimport io.ktor.client.request.HttpRequestBuilder\nimport io.ktor.client.request.get\nimport io.ktor.client.request.header\nimport io.ktor.client.request.request\nimport io.ktor.client.request.url\nimport io.ktor.client.statement.HttpResponse\nimport io.ktor.http.HttpHeaders\nimport io.ktor.http.HttpMethod\nimport io.ktor.http.HttpStatusCode\n\n\nclass GithubClient(\n    private val oauthClient: OauthClient,\n    private val httpClient: HttpClient\n) {\n    companion object {\n        val ACCEPT_HEADER_VALUE = \"application/vnd.github.v3+json\"\n        val GITHUB_API_BASE_URL = \"https://api.github.com/\"\n        val AUTH_HEADER_PREFIX = \"token \"\n        val ORGS_PATH = \"orgs/\"\n        val REPOS_PATH = \"repos\"\n        val PULLS_PATH = \"pulls\"\n        val jsonSerializer = defaultSerializer()\n    }\n\n    suspend fun getReposSummary(orgName: String): List<RepoSummary> {\n        return httpClient.request<List<RepoSummary>>(buildRequest().apply {\n            url(\"$GITHUB_API_BASE_URL$ORGS_PATH$orgName/${ REPOS_PATH }\")\n            method = HttpMethod.Get\n        })\n    }\n\n    suspend fun listPullRequests(repoSummary: RepoSummary): List<PullRequestSummary> {\n        return httpClient.request<List<PullRequestSummary>>(buildRequest().apply {\n            url(\"$GITHUB_API_BASE_URL$REPOS_PATH/${repoSummary.full_name}/$PULLS_PATH\")\n            method = HttpMethod.Get\n        })\n    }\n\n    suspend fun getPullRequestDetails(pullRequestSummary: PullRequestSummary): PullRequestDetails {\n        return httpClient.request<PullRequestDetails>(buildRequest().apply {\n            url(\"${pullRequestSummary._links.self}\")\n            method = HttpMethod.Get\n        })\n    }\n\n    suspend fun updatePullRequest(pullRequestSummary: PullRequestSummary, pullRequestUpdate: PullRequestUpdate): PullRequestDetails {\n        return httpClient.request<PullRequestDetails>(buildRequest().apply {\n            url(\"${pullRequestSummary._links.self}\")\n            method = HttpMethod.Patch\n            body = pullRequestUpdate\n        })\n    }\n\n    /**\n     * From GithubDocs\n     * Lists a maximum of 250 commits for a pull request.\n     * To receive a complete commit list for pull requests with more than 250 commits, use the Commit List API.\n     */\n    suspend fun listCommits(pullRequestSummary: PullRequestSummary): GithubCommit {\n        return httpClient.request(buildRequest().apply {\n            url(\"${pullRequestSummary._links.commits}\")\n            method = HttpMethod.Get\n        })\n    }\n\n    suspend fun listFiles(pullRequestSummary: PullRequestSummary): List<PullRequestFileDetails> {\n        return httpClient.request(buildRequest().apply {\n            url(\"${pullRequestSummary._links.self}/files\")\n            method = HttpMethod.Get\n        })\n    }\n\n    suspend fun isPrMerged(pullRequestSummary: PullRequestSummary): Boolean {\n        val response: HttpResponse = httpClient.request(buildRequest().apply {\n            url(\"${pullRequestSummary._links.self.href}/merge\")\n            method = HttpMethod.Get\n        })\n        return when(response.status) {\n            HttpStatusCode.NoContent -> true\n            HttpStatusCode.NotFound -> false\n            else -> {\n                throw RuntimeException(\"Unhandled status code ${response.status}\")\n            }\n        }\n    }\n\n    suspend fun mergePullRequest(pullRequestSummary: PullRequestSummary, mergePullRequest: MergePullRequest): Boolean {\n        val response: HttpResponse = httpClient.request(buildRequest().apply {\n            url(\"${pullRequestSummary._links.self}/merge\")\n            method = HttpMethod.Put\n            body = mergePullRequest\n        })\n        return when(response.status) {\n            HttpStatusCode.OK -> true\n            HttpStatusCode.MethodNotAllowed -> false\n            HttpStatusCode.Conflict -> false\n            else -> {\n                throw RuntimeException(\"Unhandled status code ${response.status}\")\n            }\n        }\n    }\n\n    private suspend fun buildRequest(): HttpRequestBuilder {\n        return HttpRequestBuilder().apply {\n            header(HttpHeaders.Accept, ACCEPT_HEADER_VALUE)\n            header(HttpHeaders.Authorization, \"$AUTH_HEADER_PREFIX${oauthClient.getToken(emptyMap())}\")\n        }\n    }\n}",
      "rawTextNew": "package git.provider\n\nimport auth.OauthClient\nimport codereview.Project\nimport io.ktor.client.HttpClient\nimport io.ktor.client.features.json.defaultSerializer\nimport io.ktor.client.request.HttpRequestBuilder\nimport io.ktor.client.request.get\nimport io.ktor.client.request.header\nimport io.ktor.client.request.request\nimport io.ktor.client.request.url\nimport io.ktor.client.statement.HttpResponse\nimport io.ktor.http.HttpHeaders\nimport io.ktor.http.HttpMethod\nimport io.ktor.http.HttpStatusCode\n\n\nclass GithubClient(\n    private val oauthClient: OauthClient,\n    private val httpClient: HttpClient\n) {\n    companion object {\n        private const val ACCEPT_HEADER_VALUE = \"application/vnd.github.v3+json\"\n        private const val GITHUB_API_BASE_URL = \"https://api.github.com/\"\n        private const val AUTH_HEADER_PREFIX = \"token \"\n        private const val ORGS_PATH = \"orgs/\"\n        private const val REPOS_PATH = \"repos\"\n        private const val PULLS_PATH = \"pulls\"\n        val jsonSerializer = defaultSerializer()\n    }\n\n    suspend fun getReposSummary(orgName: String): List<RepoSummary> {\n        return httpClient.request<List<RepoSummary>>(buildRequest().apply {\n            url(\"$GITHUB_API_BASE_URL$ORGS_PATH$orgName/${ REPOS_PATH }\")\n            method = HttpMethod.Get\n        })\n    }\n\n    suspend fun listPullRequests(project: Project): List<PullRequestSummary> {\n        return httpClient.request<List<PullRequestSummary>>(buildRequest().apply {\n            url(\"$GITHUB_API_BASE_URL$REPOS_PATH/${project.providerPath}/$PULLS_PATH\")\n            method = HttpMethod.Get\n        })\n    }\n\n    suspend fun getPullRequestDetails(pullRequestSummary: PullRequestSummary): PullRequestDetails {\n        return httpClient.request<PullRequestDetails>(buildRequest().apply {\n            url(\"${pullRequestSummary._links.self}\")\n            method = HttpMethod.Get\n        })\n    }\n\n    suspend fun updatePullRequest(pullRequestSummary: PullRequestSummary, pullRequestUpdate: PullRequestUpdate): PullRequestDetails {\n        return httpClient.request<PullRequestDetails>(buildRequest().apply {\n            url(\"${pullRequestSummary._links.self}\")\n            method = HttpMethod.Patch\n            body = pullRequestUpdate\n        })\n    }\n\n    /**\n     * From GithubDocs\n     * Lists a maximum of 250 commits for a pull request.\n     * To receive a complete commit list for pull requests with more than 250 commits, use the Commit List API.\n     */\n    suspend fun listCommits(pullRequestSummary: PullRequestSummary): GithubCommit {\n        return httpClient.request(buildRequest().apply {\n            url(\"${pullRequestSummary._links.commits}\")\n            method = HttpMethod.Get\n        })\n    }\n\n    suspend fun listFiles(pullRequestSummary: PullRequestSummary): List<PullRequestFileDetails> {\n        return httpClient.request(buildRequest().apply {\n            url(\"${pullRequestSummary._links.self}/files\")\n            method = HttpMethod.Get\n        })\n    }\n\n    suspend fun isPrMerged(pullRequestSummary: PullRequestSummary): Boolean {\n        val response: HttpResponse = httpClient.request(buildRequest().apply {\n            url(\"${pullRequestSummary._links.self.href}/merge\")\n            method = HttpMethod.Get\n        })\n        return when(response.status) {\n            HttpStatusCode.NoContent -> true\n            HttpStatusCode.NotFound -> false\n            else -> {\n                throw RuntimeException(\"Unhandled status code ${response.status}\")\n            }\n        }\n    }\n\n    suspend fun mergePullRequest(pullRequestSummary: PullRequestSummary, mergePullRequest: MergePullRequest): Boolean {\n        val response: HttpResponse = httpClient.request(buildRequest().apply {\n            url(\"${pullRequestSummary._links.self}/merge\")\n            method = HttpMethod.Put\n            body = mergePullRequest\n        })\n        return when(response.status) {\n            HttpStatusCode.OK -> true\n            HttpStatusCode.MethodNotAllowed -> false\n            HttpStatusCode.Conflict -> false\n            else -> {\n                throw RuntimeException(\"Unhandled status code ${response.status}\")\n            }\n        }\n    }\n\n    private suspend fun buildRequest(): HttpRequestBuilder {\n        return HttpRequestBuilder().apply {\n            header(HttpHeaders.Accept, ACCEPT_HEADER_VALUE)\n            header(HttpHeaders.Authorization, \"$AUTH_HEADER_PREFIX${oauthClient.getToken(emptyMap())}\")\n        }\n    }\n}",
      "diffChangeType": "MODIFY",
      "fileHeader": {
        "identifier": "f3f8b44",
        "fileNewPath": "kotlin/src/commonMain/kotlin/git/provider/GithubClient.kt",
        "fileOldPath": "kotlin/src/commonMain/kotlin/git/provider/GithubClient.kt",
        "description": "diff --git a/kotlin/src/commonMain/kotlin/git/provider/GithubClient.kt b/kotlin/src/commonMain/kotlin/git/provider/GithubClient.kt\nindex f37b277..f3f8b44 100644\n--- a/kotlin/src/commonMain/kotlin/git/provider/GithubClient.kt\n+++ b/kotlin/src/commonMain/kotlin/git/provider/GithubClient.kt\n",
        "editList": [
          {
            "beginA": 3,
            "beginB": 3,
            "endA": 3,
            "endB": 4,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 1
          },
          {
            "beginA": 21,
            "beginB": 22,
            "endA": 27,
            "endB": 28,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 6,
            "lengthB": 6
          },
          {
            "beginA": 37,
            "beginB": 38,
            "endA": 38,
            "endB": 39,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          },
          {
            "beginA": 39,
            "beginB": 40,
            "endA": 40,
            "endB": 41,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          }
        ]
      }
    },
    {
      "rawTextOld": "package git.provider\nimport kotlinx.serialization.Serializable\n\n//TODO: Figure out kotlinx.serialisation to convert from snake case to camel case automatically\n\nenum class GithubAuthorAssociation{\n    CONTRIBUTOR,\n    OWNER\n}\n\nenum class GithubPullRequestState{\n    open,\n    closed\n}\n\n\n@Serializable\ndata class RepoSummary(\n    val name: String,\n    val full_name: String,\n    val private: Boolean\n)\n\n@Serializable\ndata class PullRequestSummary(\n    val url: String,\n    val id: Long,\n    val node_id: String,\n    val html_url: String,\n    val diff_url: String,\n    val patch_url: String,\n    val issue_url: String,\n    val number: Int,\n    val state: GithubPullRequestState,\n    val locked: Boolean,\n    val title: String,\n    val user: User,\n    val body: String,\n    val created_at: String,\n    val updated_at: String,\n    val closed_at: String?,\n    val merged_at: String?,\n    val merge_commit_sha: String,\n    val assignee: User,\n    val assignees: List<User>,\n    val requested_reviewers: List<User>,\n    val requested_teams: List<GithubTeam>,\n    val labels: List<GithubLabel>,\n    val milestone: GithubMilestone?,\n    val draft: Boolean,\n    val commits_url: String,\n    val review_comments_url: String,\n    val review_comment_url: String,\n    val comments_url: String,\n    val statuses_url: String,\n    val head: GithubGitRef,\n    val base: GithubGitRef,\n    val _links: GithubLinkRelations,\n    val author_association: GithubAuthorAssociation\n)\n\n@Serializable\ndata class PullRequestDetails(\n    val url: String,\n    val id: Long,\n    val node_id: String,\n    val html_url: String,\n    val diff_url: String,\n    val patch_url: String,\n    val issue_url: String,\n    val commits_url: String,\n    val review_comments_url: String,\n    val review_comment_url: String,\n    val comments_url: String,\n    val statuses_url: String,\n    val number: Int,\n    val state: GithubPullRequestState,\n    val locked: Boolean,\n    val title: String,\n    val user: User,\n    val body: String,\n    val labels: List<GithubLabel>,\n    val milestone: GithubMilestone?,\n    val active_lock_reason: String? = null,\n    val created_at: String,\n    val updated_at: String,\n    val closed_at: String?,\n    val merged_at: String?,\n    val merge_commit_sha: String?,\n    val assignee: User,\n    val assignees: List<User>,\n    val requested_reviewers: List<User>,\n    val requested_teams: List<GithubTeam>,\n    val head: GithubGitRef,\n    val base: GithubGitRef,\n    val _links: GithubLinkRelations,\n    val author_association: GithubAuthorAssociation,\n    val draft: Boolean,\n    val merged: Boolean,\n    val mergeable: Boolean,\n    val rebaseable: Boolean,\n    val mergeable_state: String, //TODO Convert to Enum\n    val merged_by: User?,\n    val comments: Long,\n    val review_comments: Long,\n    val maintainer_can_modify: Boolean,\n    val commits: Long,\n    val additions: Long,\n    val deletions: Long,\n    val changed_files: Long\n)\n\n@Serializable\ndata class PullRequestUpdate(\n    val title: String,\n    val body: String,\n    val state: GithubPullRequestState,\n    /**\n     * The name of the branch you want your changes pulled into.\n     * This should be an existing branch on the current repository.\n     * You cannot update the base branch on a pull request to point to another repository.\n     */\n    val base: String,\n    val maintainer_can_modify: Boolean\n)\n\n@Serializable\ndata class GithubCommit(\n    val url: String,\n    val sha: String,\n    val node_id: String,\n    val html_url: String,\n    val comments_url: String,\n    val commit: GithubCommitDetails,\n    val author: User,\n    val committer: User,\n    val parents: List<TreeRef>\n)\n\n@Serializable\ndata class GithubCommitDetails(\n    val url: String,\n    val author: Map<String, String>,\n    val committer: Map<String, String>,\n    val message: String,\n    val tree: TreeRef,\n    val comment_count: Long,\n    val verification: CommitVerificationDetails\n)\n\n@Serializable\ndata class PullRequestFileDetails(\n    val sha: String,\n    val filename: String,\n    val status: String, // TODO: convert to enum\n    val additions: Long,\n    val deletions: Long,\n    val changes: Long,\n    val blob_url: String,\n    val raw_url: String,\n    val contents_url: String,\n    val patch: String\n)\n\n@Serializable\ndata class TreeRef(\n    val url: String,\n    val sha: String\n)\n\n@Serializable\ndata class CommitVerificationDetails(\n    val verified: Boolean,\n    val reason: String,\n    val signature: String? = null,\n    val payload: String? = null\n)\n\nenum class GithubMergeMethod {\n    merge,\n    squash,\n    rebase\n}\n\n@Serializable\ndata class MergePullRequest(\n    val commit_title: String,\n    val commit_message: String,\n    val sha: String,\n    val merge_method: GithubMergeMethod\n)\n\n@Serializable\ndata class GithubTeam(\n    val id: Long,\n    val node_id: String,\n    val url: String,\n    val html_url: String,\n    val name: String,\n    val slug: String,\n    val description: String,\n    val privacy: String,\n    val permission: String,\n    val members_url: String,\n    val repositories_url: String,\n    val parent: String?// TODO: Fix\n)\n\n@Serializable\ndata class GithubMilestone(\n    val url: String,\n    val html_url: String,\n    val labels_url: String,\n    val id: Long,\n    val node_id: String,\n    val number: Int,\n    val state: String,\n    val description: String,\n    val creator: User,\n    val open_issues: Long,\n    val closed_issues: Long,\n    val created_at: String,\n    val updated_at: String,\n    val closed_at: String?,\n    val due_on: String\n)\n\n@Serializable\ndata class GithubLabel(\n    val id: Long,\n    val node_id: String,\n    val url: String,\n    val name: String,\n    val description: String,\n    val color: String,\n    val default: Boolean\n)\n\n@Serializable\ndata class GithubLink(\n    val href: String\n) {\n    override fun toString(): String {\n        return href\n    }\n}\n\n@Serializable\ndata class GithubLinkRelations(\n    val self: GithubLink,\n    val html: GithubLink,\n    val issue: GithubLink,\n    val comments: GithubLink,\n    val review_comments: GithubLink,\n    val review_comment: GithubLink,\n    val commits: GithubLink,\n    val statuses: GithubLink\n)\n\n@Serializable\ndata class GithubGitRef(\n    val label: String,\n    val ref: String,\n    val sha: String,\n    val user: User,\n    val repo: Repo\n)\n\n@Serializable\ndata class Repo(\n    val id: Long,\n    val node_id: String,\n    val name: String,\n    val full_name: String,\n    val private: Boolean,\n    val owner: User,\n    val html_url: String,\n    val description: String,\n    val fork: Boolean,\n    val url: String,\n    val forks_url: String,\n    val keys_url: String,\n    val collaborators_url: String,\n    val teams_url: String,\n    val hooks_url: String,\n    val issue_events_url: String,\n    val events_url: String,\n    val assignees_url: String,\n    val branches_url: String,\n    val tags_url: String,\n    val blobs_url: String,\n    val git_tags_url: String,\n    val git_refs_url: String,\n    val trees_url: String,\n    val statuses_url: String,\n    val languages_url: String,\n    val stargazers_url: String,\n    val contributors_url: String,\n    val subscribers_url: String,\n    val subscription_url: String,\n    val commits_url: String,\n    val git_commits_url: String,\n    val comments_url: String,\n    val issue_comment_url: String,\n    val contents_url: String,\n    val compare_url: String,\n    val merges_url: String,\n    val archive_url: String,\n    val downloads_url: String,\n    val issues_url: String,\n    val pulls_url: String,\n    val milestones_url: String,\n    val notifications_url: String,\n    val labels_url: String,\n    val releases_url: String,\n    val deployments_url: String,\n    val created_at: String,\n    val updated_at: String,\n    val pushed_at: String,\n    val git_url: String,\n    val ssh_url: String,\n    val clone_url: String,\n    val svn_url: String,\n    val homepage: String?,\n    val size: Int,\n    val stargazers_count: Long,\n    val watchers_count: Long,\n    val language: String?,\n    val has_issues: Boolean,\n    val has_projects: Boolean,\n    val has_downloads: Boolean,\n    val has_wiki: Boolean,\n    val has_pages: Boolean,\n    val forks_count: Long,\n    val mirror_url: String?,\n    val archived: Boolean,\n    val disabled: Boolean,\n    val open_issues_count: Long,\n    val license: String? = null,\n    val forks: Long? = 0,\n    val open_issues: Long? = 0,\n    val watchers: Long? = 0,\n    val default_branch: String\n)\n\n@Serializable\ndata class User(\n    val login: String,\n    val id: Long,\n    val node_id: String,\n    val avatar_url: String,\n    val gravatar_id: String,\n    val url: String,\n    val html_url: String,\n    val followers_url: String,\n    val following_url: String,\n    val gists_url: String,\n    val starred_url: String,\n    val subscriptions_url: String,\n    val organizations_url: String,\n    val repos_url: String,\n    val events_url: String,\n    val received_events_url: String,\n    val type: String, //TODO: Convert to enum after reading docs\n    val site_admin: Boolean\n)\n",
      "rawTextNew": "package git.provider\nimport kotlinx.serialization.Serializable\n\n//TODO: Figure out kotlinx.serialisation to convert from snake case to camel case automatically\n\nenum class GithubAuthorAssociation{\n    CONTRIBUTOR,\n    OWNER\n}\n\nenum class GithubPullRequestState{\n    open,\n    closed\n}\n\n\n@Serializable\ndata class RepoSummary(\n    val name: String,\n    val full_name: String,\n    val private: Boolean\n)\n\n@Serializable\ndata class PullRequestSummary(\n    val url: String,\n    val id: Long,\n    val node_id: String,\n    val html_url: String,\n    val diff_url: String,\n    val patch_url: String,\n    val issue_url: String,\n    val number: Int,\n    val state: GithubPullRequestState,\n    val locked: Boolean,\n    val title: String,\n    val user: User,\n    val body: String,\n    val created_at: String,\n    val updated_at: String,\n    val closed_at: String?,\n    val merged_at: String?,\n    val merge_commit_sha: String,\n    val assignee: User?,\n    val assignees: List<User>,\n    val requested_reviewers: List<User>,\n    val requested_teams: List<GithubTeam>,\n    val labels: List<GithubLabel>,\n    val milestone: GithubMilestone?,\n    val draft: Boolean,\n    val commits_url: String,\n    val review_comments_url: String,\n    val review_comment_url: String,\n    val comments_url: String,\n    val statuses_url: String,\n    val head: GithubGitRef,\n    val base: GithubGitRef,\n    val _links: GithubLinkRelations,\n    val author_association: GithubAuthorAssociation\n)\n\n@Serializable\ndata class PullRequestDetails(\n    val url: String,\n    val id: Long,\n    val node_id: String,\n    val html_url: String,\n    val diff_url: String,\n    val patch_url: String,\n    val issue_url: String,\n    val commits_url: String,\n    val review_comments_url: String,\n    val review_comment_url: String,\n    val comments_url: String,\n    val statuses_url: String,\n    val number: Int,\n    val state: GithubPullRequestState,\n    val locked: Boolean,\n    val title: String,\n    val user: User,\n    val body: String,\n    val labels: List<GithubLabel>,\n    val milestone: GithubMilestone?,\n    val active_lock_reason: String? = null,\n    val created_at: String,\n    val updated_at: String,\n    val closed_at: String?,\n    val merged_at: String?,\n    val merge_commit_sha: String?,\n    val assignee: User?,\n    val assignees: List<User>,\n    val requested_reviewers: List<User>,\n    val requested_teams: List<GithubTeam>,\n    val head: GithubGitRef,\n    val base: GithubGitRef,\n    val _links: GithubLinkRelations,\n    val author_association: GithubAuthorAssociation,\n    val draft: Boolean,\n    val merged: Boolean,\n    val mergeable: Boolean,\n    val rebaseable: Boolean,\n    val mergeable_state: String, //TODO Convert to Enum\n    val merged_by: User?,\n    val comments: Long,\n    val review_comments: Long,\n    val maintainer_can_modify: Boolean,\n    val commits: Long,\n    val additions: Long,\n    val deletions: Long,\n    val changed_files: Long\n)\n\n@Serializable\ndata class PullRequestUpdate(\n    val title: String,\n    val body: String,\n    val state: GithubPullRequestState,\n    /**\n     * The name of the branch you want your changes pulled into.\n     * This should be an existing branch on the current repository.\n     * You cannot update the base branch on a pull request to point to another repository.\n     */\n    val base: String,\n    val maintainer_can_modify: Boolean\n)\n\n@Serializable\ndata class GithubCommit(\n    val url: String,\n    val sha: String,\n    val node_id: String,\n    val html_url: String,\n    val comments_url: String,\n    val commit: GithubCommitDetails,\n    val author: User,\n    val committer: User,\n    val parents: List<TreeRef>\n)\n\n@Serializable\ndata class GithubCommitDetails(\n    val url: String,\n    val author: Map<String, String>,\n    val committer: Map<String, String>,\n    val message: String,\n    val tree: TreeRef,\n    val comment_count: Long,\n    val verification: CommitVerificationDetails\n)\n\n@Serializable\ndata class PullRequestFileDetails(\n    val sha: String,\n    val filename: String,\n    val status: String, // TODO: convert to enum\n    val additions: Long,\n    val deletions: Long,\n    val changes: Long,\n    val blob_url: String,\n    val raw_url: String,\n    val contents_url: String,\n    val patch: String\n)\n\n@Serializable\ndata class TreeRef(\n    val url: String,\n    val sha: String\n)\n\n@Serializable\ndata class CommitVerificationDetails(\n    val verified: Boolean,\n    val reason: String,\n    val signature: String? = null,\n    val payload: String? = null\n)\n\nenum class GithubMergeMethod {\n    merge,\n    squash,\n    rebase\n}\n\n@Serializable\ndata class MergePullRequest(\n    val commit_title: String,\n    val commit_message: String,\n    val sha: String,\n    val merge_method: GithubMergeMethod\n)\n\n@Serializable\ndata class GithubTeam(\n    val id: Long,\n    val node_id: String,\n    val url: String,\n    val html_url: String,\n    val name: String,\n    val slug: String,\n    val description: String,\n    val privacy: String,\n    val permission: String,\n    val members_url: String,\n    val repositories_url: String,\n    val parent: String?// TODO: Fix\n)\n\n@Serializable\ndata class GithubMilestone(\n    val url: String,\n    val html_url: String,\n    val labels_url: String,\n    val id: Long,\n    val node_id: String,\n    val number: Int,\n    val state: String,\n    val description: String,\n    val creator: User,\n    val open_issues: Long,\n    val closed_issues: Long,\n    val created_at: String,\n    val updated_at: String,\n    val closed_at: String?,\n    val due_on: String\n)\n\n@Serializable\ndata class GithubLabel(\n    val id: Long,\n    val node_id: String,\n    val url: String,\n    val name: String,\n    val description: String,\n    val color: String,\n    val default: Boolean\n)\n\n@Serializable\ndata class GithubLink(\n    val href: String\n) {\n    override fun toString(): String {\n        return href\n    }\n}\n\n@Serializable\ndata class GithubLinkRelations(\n    val self: GithubLink,\n    val html: GithubLink,\n    val issue: GithubLink,\n    val comments: GithubLink,\n    val review_comments: GithubLink,\n    val review_comment: GithubLink,\n    val commits: GithubLink,\n    val statuses: GithubLink\n)\n\n@Serializable\ndata class GithubGitRef(\n    val label: String,\n    val ref: String,\n    val sha: String,\n    val user: User,\n    val repo: Repo\n)\n\n@Serializable\ndata class Repo(\n    val id: Long,\n    val node_id: String,\n    val name: String,\n    val full_name: String,\n    val private: Boolean,\n    val owner: User,\n    val html_url: String,\n    val description: String,\n    val fork: Boolean,\n    val url: String,\n    val forks_url: String,\n    val keys_url: String,\n    val collaborators_url: String,\n    val teams_url: String,\n    val hooks_url: String,\n    val issue_events_url: String,\n    val events_url: String,\n    val assignees_url: String,\n    val branches_url: String,\n    val tags_url: String,\n    val blobs_url: String,\n    val git_tags_url: String,\n    val git_refs_url: String,\n    val trees_url: String,\n    val statuses_url: String,\n    val languages_url: String,\n    val stargazers_url: String,\n    val contributors_url: String,\n    val subscribers_url: String,\n    val subscription_url: String,\n    val commits_url: String,\n    val git_commits_url: String,\n    val comments_url: String,\n    val issue_comment_url: String,\n    val contents_url: String,\n    val compare_url: String,\n    val merges_url: String,\n    val archive_url: String,\n    val downloads_url: String,\n    val issues_url: String,\n    val pulls_url: String,\n    val milestones_url: String,\n    val notifications_url: String,\n    val labels_url: String,\n    val releases_url: String,\n    val deployments_url: String,\n    val created_at: String,\n    val updated_at: String,\n    val pushed_at: String,\n    val git_url: String,\n    val ssh_url: String,\n    val clone_url: String,\n    val svn_url: String,\n    val homepage: String?,\n    val size: Int,\n    val stargazers_count: Long,\n    val watchers_count: Long,\n    val language: String?,\n    val has_issues: Boolean,\n    val has_projects: Boolean,\n    val has_downloads: Boolean,\n    val has_wiki: Boolean,\n    val has_pages: Boolean,\n    val forks_count: Long,\n    val mirror_url: String?,\n    val archived: Boolean,\n    val disabled: Boolean,\n    val open_issues_count: Long,\n    val license: String? = null,\n    val forks: Long? = 0,\n    val open_issues: Long? = 0,\n    val watchers: Long? = 0,\n    val default_branch: String\n)\n\n@Serializable\ndata class User(\n    val login: String,\n    val id: Long,\n    val node_id: String,\n    val avatar_url: String,\n    val gravatar_id: String,\n    val url: String,\n    val html_url: String,\n    val followers_url: String,\n    val following_url: String,\n    val gists_url: String,\n    val starred_url: String,\n    val subscriptions_url: String,\n    val organizations_url: String,\n    val repos_url: String,\n    val events_url: String,\n    val received_events_url: String,\n    val type: String, //TODO: Convert to enum after reading docs\n    val site_admin: Boolean\n)\n",
      "diffChangeType": "MODIFY",
      "fileHeader": {
        "identifier": "e9d93ad",
        "fileNewPath": "kotlin/src/commonMain/kotlin/git/provider/GithubDtos.kt",
        "fileOldPath": "kotlin/src/commonMain/kotlin/git/provider/GithubDtos.kt",
        "description": "diff --git a/kotlin/src/commonMain/kotlin/git/provider/GithubDtos.kt b/kotlin/src/commonMain/kotlin/git/provider/GithubDtos.kt\nindex d92aee8..e9d93ad 100644\n--- a/kotlin/src/commonMain/kotlin/git/provider/GithubDtos.kt\n+++ b/kotlin/src/commonMain/kotlin/git/provider/GithubDtos.kt\n",
        "editList": [
          {
            "beginA": 43,
            "beginB": 43,
            "endA": 44,
            "endB": 44,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          },
          {
            "beginA": 89,
            "beginB": 89,
            "endA": 90,
            "endB": 90,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          }
        ]
      }
    },
    {
      "rawTextOld": "import codereview.DiffChangeType\nimport codereview.Edit\nimport codereview.FileDiff\nimport codereview.FileDiffList\nimport codereview.FileHeader\nimport react.dom.render\nimport supercr.css.styles\nimport supercr.views.changeSetScreen\nimport supercr.views.fileView\nimport supercr.views.getStartedScreen\nimport kotlin.browser.document\n\nfun main () {\n    document.head!!.insertAdjacentHTML(\"afterbegin\", \"<style>$styles</style>\")\n    /**\n     * The official documentation specifies that we create a <div id = 'root'> in index.html\n     * Somehow, that prevents tests from executing properly (this was after we introduced react)\n     * As a workaround, we create the root div element here instead\n     * See here for more details - https://stackoverflow.com/questions/61839800/unit-testing-in-kotlin-js/62058511#62058511\n     */\n    document.body!!.insertAdjacentHTML(\"afterbegin\", \"<div id='root'></div>\" )\n    renderDiffView()\n//    renderGettingStarted()\n}\n\nprivate fun renderGettingStarted() {\n    render(document.getElementById(\"root\")) {\n        getStartedScreen {\n\n        }\n    }\n}\n\nprivate fun renderDiffView() {\n    render(document.getElementById(\"root\")) {\n        changeSetScreen {\n            fileDiffList = FileDiffList(\n                fileDiffs =  listOf(\n                    testModifyDiff,\n                    testAddFileDifff\n                )\n            )\n        }\n    }\n}\n\nprivate val testModifyDiff = FileDiff(\n    rawTextOld = \"\"\"\n                public class FooBarBaz {\n                  public static void main() {\n                    System.out.println(\"This is a line\");\n                    System.out.println(\"This is 2nd line\");\n                    System.out.println(\"This is 3rd line\");\n                    System.out.println(\"This is 4th line\");\n                  }\n                }\n            \n        \"\"\".trimIndent(),\n    rawTextNew = \"\"\"\n                public class FooBarBaz {\n                  // Adding a comment - which will be a completely new line\n                  public static void main() {\n                    System.out.println(\"This is a line\");\n                    System.out.println(\"This is 2nd changed line\");\n                    System.out.println(\"This is 3rd changed line\");\n                    System.out.println(\"This is a new line\");\n                    System.out.println(\"This is 4th line\");\n\n                }\n        \"\"\".trimIndent(),\n    diffChangeType = DiffChangeType.MODIFY,\n    fileHeader = FileHeader(\n        fileNewPath = \"kotlin-js/src/commonMain/kotlin/codereview/ChangesetM.kt\",\n        fileOldPath = \"kotlin-js/src/commonMain/kotlin/codereview/Changeset.kt\",\n        description = \"\",\n        identifier = \"xyz1234\",\n        editList = listOf(\n            Edit(beginA = 1, endA = 1, beginB = 1, endB = 2),\n            Edit(beginA = 3, endA = 5, beginB = 4, endB = 7),\n            Edit(beginA = 6, endA = 8, beginB = 8, endB = 8),\n            Edit(beginA = 9, endA = 9, beginB = 9, endB = 10)\n        )\n    )\n)\n\nprivate val testRenameDiff = FileDiff(\n    rawTextOld = \"\"\"\n                public class FooBarBaz {\n                  public static void main() {\n                    System.out.println(\"This is a line\");\n                    System.out.println(\"This is 2nd line\");\n                    System.out.println(\"This is 3rd line\");\n                    System.out.println(\"This is 4th line\");\n                  }\n                }\n            \n        \"\"\".trimIndent(),\n    rawTextNew = \"\"\"\n                public class FooBarBaz {\n                  // Adding a comment - which will be a completely new line\n                  public static void main() {\n                    System.out.println(\"This is a line\");\n                    System.out.println(\"This is 2nd changed line\");\n                    System.out.println(\"This is 3rd changed line\");\n                    System.out.println(\"This is a new line\");\n                    System.out.println(\"This is 4th line\");\n\n                }\n        \"\"\".trimIndent(),\n    diffChangeType = DiffChangeType.RENAME,\n    fileHeader = FileHeader(\n        fileNewPath = \"kotlin-js/src/commonMain/kotlin/codereview/Changeset.kt\",\n        fileOldPath = \"kotlin-js/src/commonMain/kotlin/codereview/Changeset2.kt\",\n        description = \"\",\n        identifier = \"abcd1234\",\n        editList = listOf(\n            Edit(beginA = 1, endA = 1, beginB = 1, endB = 2),\n            Edit(beginA = 3, endA = 5, beginB = 4, endB = 7),\n            Edit(beginA = 6, endA = 8, beginB = 8, endB = 8),\n            Edit(beginA = 9, endA = 9, beginB = 9, endB = 10)\n        )\n    )\n)\n\nval testAddFileDifff = FileDiff (\n    rawTextOld = null,\n    rawTextNew = \"\"\"\n                public class FooBarBaz {\n                  // Adding a comment - which will be a completely new line\n                  public static void main() {\n                    System.out.println(\"This is a line\");\n                    System.out.println(\"This is 2nd changed line\");\n                    System.out.println(\"This is 3rd changed line\");\n                    System.out.println(\"This is a new line\");\n                    System.out.println(\"This is 4th line\");\n\n                }\n        \"\"\".trimIndent(),\n    diffChangeType = DiffChangeType.ADD,\n    fileHeader = FileHeader(\n        fileNewPath = \"kotlin-js/src/commonMain/kotlin/codereview/ChangesetA.kt\",\n        fileOldPath = \"\",\n        description = \"\",\n        identifier = \"newFile1234\",\n        editList = emptyList()\n    )\n)\n\nval testRemovedFileDiff = FileDiff (\n    rawTextNew = null,\n    rawTextOld = \"\"\"\n                public class FooBarBaz {\n                  // Adding a comment - which will be a completely new line\n                  public static void main() {\n                    System.out.println(\"This is a line\");\n                    System.out.println(\"This is 2nd changed line\");\n                    System.out.println(\"This is 3rd changed line\");\n                    System.out.println(\"This is a new line\");\n                    System.out.println(\"This is 4th line\");\n\n                }\n        \"\"\".trimIndent(),\n    diffChangeType = DiffChangeType.DELETE,\n    fileHeader = FileHeader(\n        fileOldPath = \"kotlin-js/src/commonMain/kotlin/codereview/Changeset.kt\",\n        fileNewPath = \"\",\n        description = \"\",\n        identifier = \"oldFile1234\",\n        editList = emptyList()\n    )\n)\n",
      "rawTextNew": "import codereview.DiffChangeType\nimport codereview.Edit\nimport codereview.FileDiff\nimport codereview.FileDiffList\nimport codereview.FileHeader\nimport react.dom.render\nimport supercr.css.styles\nimport supercr.workflows.codereview.screens.changeSetScreen\nimport supercr.workflows.gettingstarted.screens.getStartedScreen\nimport supercr.workflows.mainScreen\nimport kotlin.browser.document\n\nfun main () {\n    document.head!!.insertAdjacentHTML(\"afterbegin\", \"<style>$styles</style>\")\n    /**\n     * The official documentation specifies that we create a <div id = 'root'> in index.html\n     * Somehow, that prevents tests from executing properly (this was after we introduced react)\n     * As a workaround, we create the root div element here instead\n     * See here for more details - https://stackoverflow.com/questions/61839800/unit-testing-in-kotlin-js/62058511#62058511\n     */\n    document.body!!.insertAdjacentHTML(\"afterbegin\", \"<div id='root'></div>\" )\n//    renderDiffView()\n//    renderGettingStarted()\n    renderMainScreen()\n}\nprivate fun renderMainScreen() {\n    render(document.getElementById(\"root\")) {\n        mainScreen {\n\n        }\n    }\n}\n\nprivate fun renderGettingStarted() {\n    render(document.getElementById(\"root\")) {\n        getStartedScreen {\n\n        }\n    }\n}\n\nprivate fun renderDiffView() {\n    render(document.getElementById(\"root\")) {\n        changeSetScreen {\n            fileDiffList = FileDiffList(\n                fileDiffs =  listOf(\n                    testModifyDiff,\n                    testAddFileDifff\n                )\n            )\n        }\n    }\n}\n\nprivate val testModifyDiff = FileDiff(\n    rawTextOld = \"\"\"\n                public class FooBarBaz {\n                  public static void main() {\n                    System.out.println(\"This is a line\");\n                    System.out.println(\"This is 2nd line\");\n                    System.out.println(\"This is 3rd line\");\n                    System.out.println(\"This is 4th line\");\n                  }\n                }\n            \n        \"\"\".trimIndent(),\n    rawTextNew = \"\"\"\n                public class FooBarBaz {\n                  // Adding a comment - which will be a completely new line\n                  public static void main() {\n                    System.out.println(\"This is a line\");\n                    System.out.println(\"This is 2nd changed line\");\n                    System.out.println(\"This is 3rd changed line\");\n                    System.out.println(\"This is a new line\");\n                    System.out.println(\"This is 4th line\");\n\n                }\n        \"\"\".trimIndent(),\n    diffChangeType = DiffChangeType.MODIFY,\n    fileHeader = FileHeader(\n        fileNewPath = \"kotlin-js/src/commonMain/kotlin/codereview/ChangesetM.kt\",\n        fileOldPath = \"kotlin-js/src/commonMain/kotlin/codereview/Changeset.kt\",\n        description = \"\",\n        identifier = \"xyz1234\",\n        editList = listOf(\n            Edit(beginA = 1, endA = 1, beginB = 1, endB = 2),\n            Edit(beginA = 3, endA = 5, beginB = 4, endB = 7),\n            Edit(beginA = 6, endA = 8, beginB = 8, endB = 8),\n            Edit(beginA = 9, endA = 9, beginB = 9, endB = 10)\n        )\n    )\n)\n\nprivate val testRenameDiff = FileDiff(\n    rawTextOld = \"\"\"\n                public class FooBarBaz {\n                  public static void main() {\n                    System.out.println(\"This is a line\");\n                    System.out.println(\"This is 2nd line\");\n                    System.out.println(\"This is 3rd line\");\n                    System.out.println(\"This is 4th line\");\n                  }\n                }\n            \n        \"\"\".trimIndent(),\n    rawTextNew = \"\"\"\n                public class FooBarBaz {\n                  // Adding a comment - which will be a completely new line\n                  public static void main() {\n                    System.out.println(\"This is a line\");\n                    System.out.println(\"This is 2nd changed line\");\n                    System.out.println(\"This is 3rd changed line\");\n                    System.out.println(\"This is a new line\");\n                    System.out.println(\"This is 4th line\");\n\n                }\n        \"\"\".trimIndent(),\n    diffChangeType = DiffChangeType.RENAME,\n    fileHeader = FileHeader(\n        fileNewPath = \"kotlin-js/src/commonMain/kotlin/codereview/Changeset.kt\",\n        fileOldPath = \"kotlin-js/src/commonMain/kotlin/codereview/Changeset2.kt\",\n        description = \"\",\n        identifier = \"abcd1234\",\n        editList = listOf(\n            Edit(beginA = 1, endA = 1, beginB = 1, endB = 2),\n            Edit(beginA = 3, endA = 5, beginB = 4, endB = 7),\n            Edit(beginA = 6, endA = 8, beginB = 8, endB = 8),\n            Edit(beginA = 9, endA = 9, beginB = 9, endB = 10)\n        )\n    )\n)\n\nval testAddFileDifff = FileDiff (\n    rawTextOld = null,\n    rawTextNew = \"\"\"\n                public class FooBarBaz {\n                  // Adding a comment - which will be a completely new line\n                  public static void main() {\n                    System.out.println(\"This is a line\");\n                    System.out.println(\"This is 2nd changed line\");\n                    System.out.println(\"This is 3rd changed line\");\n                    System.out.println(\"This is a new line\");\n                    System.out.println(\"This is 4th line\");\n\n                }\n        \"\"\".trimIndent(),\n    diffChangeType = DiffChangeType.ADD,\n    fileHeader = FileHeader(\n        fileNewPath = \"kotlin-js/src/commonMain/kotlin/codereview/ChangesetA.kt\",\n        fileOldPath = \"\",\n        description = \"\",\n        identifier = \"newFile1234\",\n        editList = emptyList()\n    )\n)\n\nval testRemovedFileDiff = FileDiff (\n    rawTextNew = null,\n    rawTextOld = \"\"\"\n                public class FooBarBaz {\n                  // Adding a comment - which will be a completely new line\n                  public static void main() {\n                    System.out.println(\"This is a line\");\n                    System.out.println(\"This is 2nd changed line\");\n                    System.out.println(\"This is 3rd changed line\");\n                    System.out.println(\"This is a new line\");\n                    System.out.println(\"This is 4th line\");\n\n                }\n        \"\"\".trimIndent(),\n    diffChangeType = DiffChangeType.DELETE,\n    fileHeader = FileHeader(\n        fileOldPath = \"kotlin-js/src/commonMain/kotlin/codereview/Changeset.kt\",\n        fileNewPath = \"\",\n        description = \"\",\n        identifier = \"oldFile1234\",\n        editList = emptyList()\n    )\n)\n",
      "diffChangeType": "MODIFY",
      "fileHeader": {
        "identifier": "0fde9b1",
        "fileNewPath": "kotlin/src/jsMain/kotlin/App.kt",
        "fileOldPath": "kotlin/src/jsMain/kotlin/App.kt",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/App.kt b/kotlin/src/jsMain/kotlin/App.kt\nindex 5dd6a37..0fde9b1 100644\n--- a/kotlin/src/jsMain/kotlin/App.kt\n+++ b/kotlin/src/jsMain/kotlin/App.kt\n",
        "editList": [
          {
            "beginA": 7,
            "beginB": 7,
            "endA": 10,
            "endB": 10,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 3,
            "lengthB": 3
          },
          {
            "beginA": 21,
            "beginB": 21,
            "endA": 22,
            "endB": 22,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          },
          {
            "beginA": 23,
            "beginB": 23,
            "endA": 23,
            "endB": 31,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 8
          }
        ]
      }
    },
    {
      "rawTextOld": "package supercr.views\n\nimport Button\nimport Grid\nimport ListItem\nimport MaterialUIList\nimport Paper\nimport auth.DumbOauthClient\nimport git.provider.GithubClient\nimport git.provider.RepoSummary\nimport io.ktor.client.HttpClient\nimport io.ktor.client.features.json.JsonFeature\nimport io.ktor.client.features.json.serializer.KotlinxSerializer\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.async\nimport kotlinx.css.Display\nimport kotlinx.css.display\nimport kotlinx.html.InputType\nimport kotlinx.html.js.onChangeFunction\nimport org.w3c.dom.HTMLInputElement\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.createRef\nimport react.dom.defaultValue\nimport react.dom.input\nimport react.dom.p\nimport react.setState\nimport styled.css\nimport styled.styledInput\n\nexternal interface GettingStartedScreenState: RState {\n    var isLoggedIn: Boolean\n    var accessToken: String\n}\n\nclass GetStartedScreen: RComponent<RProps, GettingStartedScreenState>() {\n\n    override fun GettingStartedScreenState.init() {\n        isLoggedIn = false\n        accessToken = \"\"\n    }\n\n    override fun RBuilder.render() {\n        if (!state.isLoggedIn) {\n            loginComponent {\n                onLoginButtonPressed = { enteredAccessToken ->\n                    setState {\n                        isLoggedIn = true\n                        accessToken = enteredAccessToken\n                    }\n                }\n            }\n        } else {\n            repoInit {\n                githubClient = GithubClient(\n                    oauthClient = DumbOauthClient(state.accessToken),\n                    httpClient = HttpClient() {\n                        install(JsonFeature) {\n                            serializer = KotlinxSerializer(json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true)))\n                        }\n                    }\n                )\n                gotoReviewScreen = {\n                    console.log(\"Will go to next screen now\")\n                }\n            }\n        }\n    }\n\n}\n\nfun RBuilder.getStartedScreen(handler: RProps.() -> Unit): ReactElement {\n    return child(GetStartedScreen::class) {\n        this.attrs(handler)\n    }\n}\n\ninterface LoginComponentProps: RProps {\n    var onLoginButtonPressed: (String) -> Unit\n}\n\nclass LoginComponent: RComponent<LoginComponentProps, RState>() {\n    private val personalAccessTokenInputRef = createRef<HTMLInputElement>()\n\n    override fun RBuilder.render() {\n        Grid {\n            attrs {\n                item = false\n                container = true\n                alignItems = \"center\"\n                direction = \"row\"\n                justify = \"center\"\n                spacing = 4\n            }\n        }\n        Grid {\n            attrs {\n                item = true\n                container = false\n            }\n            Paper {\n                attrs {\n                    square = true\n                    elevation = 3\n                }\n                Grid {\n                    attrs {\n                        item = false\n                        container = true\n                        alignItems = \"center\"\n                        direction = \"row\"\n                        justify = \"center\"\n                        spacing = 2\n                    }\n                    Grid {\n                        attrs {\n                            item = true\n                            container = false\n                            xs = 12\n                        }\n                        p {\n                            + \"Welcome to the fastest CR experience. Lets Get Started\"\n                        }\n                        input(type = InputType.password) {\n                            ref = personalAccessTokenInputRef\n                            attrs.placeholder = \"Enter your github personal access token\"\n                            attrs.defaultValue = \"4da05160ff8311a45f31fe8fd6ab374b8a6f9fe9\"\n                        }\n                    }\n                    Grid {\n                        attrs {\n                            item = true\n                            container = false\n                            xs = 4\n                        }\n                    }\n                    Grid {\n                        attrs {\n                            item = true\n                            container = false\n                            xs = 4\n                        }\n                        Button {\n                            attrs {\n                                variant = \"contained\"\n                                color = \"primary\"\n                                onClick= {\n                                    props.onLoginButtonPressed(personalAccessTokenInputRef.current!!.value)\n                                }\n                            }\n                            + \"Login\"\n                        }\n                    }\n                    Grid {\n                        attrs {\n                            item = true\n                            container = false\n                            xs = 4\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nfun RBuilder.loginComponent(handler: LoginComponentProps.() -> Unit): ReactElement {\n    return child(LoginComponent::class) {\n        this.attrs(handler)\n    }\n}\n\ninterface RepoInitProps: RProps {\n    var githubClient: GithubClient\n    var gotoReviewScreen: () -> Unit\n}\n\ninterface RepoInitState: RState {\n    var repoList: List<RepoSummary>\n    var showNextButton: Boolean\n}\n\nclass RepoInitComponent: RComponent<RepoInitProps, RepoInitState>() {\n    override fun RepoInitState.init() {\n        repoList = emptyList()\n        showNextButton = false\n    }\n\n    override fun RBuilder.render() {\n        MaterialUIList {\n            state.repoList.map {\n                repoComponent {\n                    repoSummary = it\n                    onPathSelect = handleRepoSelection\n                }\n            }\n        }\n        if (state.showNextButton) {\n            Button {\n                attrs {\n                    variant = \"contained\"\n                    color = \"primary\"\n                    onClick= props.gotoReviewScreen\n                }\n                + \"Done\"\n            }\n        }\n    }\n\n    override fun componentDidMount() {\n        fetchRepos()\n    }\n\n    /**\n     * TODO: Add some validations to check if the repo being selected is correct or no\n     *  ** Selected Path should be a git repo\n     *  ** Selected Path must point to the same origin (getOriginURL().contains(repoName))\n     */\n    private val handleRepoSelection: (String) -> Boolean = { givenPath ->\n        setState {\n            showNextButton = true\n        }\n        true\n    }\n\n    private fun fetchRepos() {\n        GlobalScope.async {\n            props.githubClient.getReposSummary(\"theboringtech\")\n                .let {\n                    setState {\n                        repoList = it\n                    }\n                }\n        }.invokeOnCompletion { throwable ->\n            if (throwable != null) {\n                console.error(\"Something bad happened\")\n                console.error(throwable)\n            }\n        }\n    }\n}\n\nfun RBuilder.repoInit(handler: RepoInitProps.() -> Unit): ReactElement {\n    return child(RepoInitComponent::class) {\n        this.attrs(handler)\n    }\n}\n\nexternal interface RepoComponentProps: RProps {\n    var repoSummary: RepoSummary\n    var onPathSelect: (String) -> Boolean\n}\n\nexternal interface RepoComponentState: RState {\n    var isProcessed: Boolean\n}\n\nclass RepoComponent: RComponent<RepoComponentProps, RepoComponentState>() {\n    private val inputFileRef = createRef<HTMLInputElement>()\n    private val handleSelection =  {\n        console.log(\"Clicked ${props.repoSummary.full_name}\")\n//        inputFileRef.current!!.click() TODO See below. Below if condition is just a hack to select the 'right folder'\n        val markProcessed = if (props.repoSummary.full_name == \"theboringtech/btcmain\") {\n            props.onPathSelect(\"/home/yogesh/work/btc\")\n        } else {\n            props.onPathSelect(\"/home/yogesh/work/theboringtech.github.io\")\n        }\n        setState {\n            isProcessed = markProcessed\n        }\n    }\n\n    override fun RepoComponentState.init() {\n        isProcessed = false\n    }\n\n    override fun RBuilder.render() {\n        ListItem {\n            attrs {\n                button = true\n                alignItems = \"center\"\n                divider = true\n                onClick = handleSelection\n                disabled = state.isProcessed\n            }\n            p {\n                +props.repoSummary.full_name\n            }\n            /** TODO: Make this work once we switch to electron or Kvision. Right now it just sits there - never used */\n            styledInput {\n                css {\n                    display = Display.none\n                }\n                attrs {\n                    ref = inputFileRef\n                }\n                attrs.onChangeFunction = { event ->\n                    console.log(\"Got the value as ${inputFileRef.current?.files}\")\n                }\n            }\n        }\n    }\n\n}\n\nprivate fun RBuilder.repoComponent(handler: RepoComponentProps.() -> Unit): ReactElement {\n    return child(RepoComponent::class) {\n        this.attrs(handler)\n    }\n}\n\n",
      "rawTextNew": null,
      "diffChangeType": "DELETE",
      "fileHeader": {
        "identifier": "0000000",
        "fileNewPath": "/dev/null",
        "fileOldPath": "kotlin/src/jsMain/kotlin/supercr/views/GetStartedScreen.kt",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/views/GetStartedScreen.kt b/kotlin/src/jsMain/kotlin/supercr/views/GetStartedScreen.kt\ndeleted file mode 100644\nindex ee4c166..0000000\n--- a/kotlin/src/jsMain/kotlin/supercr/views/GetStartedScreen.kt\n+++ /dev/null\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 315,
            "endB": 0,
            "editType": "DELETE",
            "isEmpty": false,
            "lengthA": 315,
            "lengthB": 0
          }
        ]
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "package supercr.workflows\n\nimport auth.DumbOauthClient\nimport codereview.Project\nimport codereview.SuperCrClient\nimport git.provider.GithubClient\nimport io.ktor.client.HttpClient\nimport io.ktor.client.features.json.JsonFeature\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport io.ktor.client.features.json.serializer.KotlinxSerializer\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.async\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.setState\nimport supercr.workflows.gettingstarted.screens.getStartedScreen\nimport supercr.workflows.overview.screens.overviewScreen\n\nexternal interface MainScreenState: RState{\n    var projects: List<Project>\n    var accessToken: String\n}\n\nexternal interface MainScreenProps: RProps {\n\n}\n\nclass MainScreen : RComponent<MainScreenProps, MainScreenState>() {\n    override fun RBuilder.render() {\n        if(state.projects.isEmpty()) {\n            getStartedScreen { \n                passAccessToken = receiveGithubAccessToken\n                passProjects = receiveProjects\n                superCrClient = this@MainScreen.superCrClient\n            }\n        } else {\n            overviewScreen {\n                projects = state.projects\n                getGithubClient = this@MainScreen.getGithubClient\n            }\n        }\n    }\n\n    override fun componentDidMount() {\n        GlobalScope.async(context = Dispatchers.Main) {\n            superCrClient.getAllProjects()\n                .let {\n                    setState {\n                        projects = it\n                    }\n                }\n        }.invokeOnCompletion { throwable ->\n            if (throwable != null) {\n                console.error(\"Something bad happened\")\n                console.error(throwable)\n            }\n        }\n    }\n\n    override fun MainScreenState.init() {\n        projects = emptyList()\n        accessToken = \"4da05160ff8311a45f31fe8fd6ab374b8a6f9fe9\"\n    }\n\n    private val receiveGithubAccessToken: (String) -> Unit = { receivedAccessToken ->\n        setState {\n            accessToken = receivedAccessToken\n        }\n    }\n\n    private val getGithubClient: () -> GithubClient = {\n        GithubClient(\n            oauthClient = DumbOauthClient(state.accessToken),\n            httpClient = HttpClient() {\n                install(JsonFeature) {\n                    serializer = KotlinxSerializer(json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true)))\n                }\n            }\n        )\n    }\n\n    private val receiveProjects: (List<Project>) -> Unit = { receivedProjects ->\n        setState {\n            projects += receivedProjects\n        }\n    }\n\n    private val superCrClient = SuperCrClient(\n        httpClient = HttpClient() {\n            install(JsonFeature) {\n                serializer = KotlinxSerializer(json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true)))\n            }\n        }\n    )\n\n}\n\nfun RBuilder.mainScreen(handler: MainScreenProps.() -> Unit) : ReactElement {\n    return child(MainScreen::class) {\n        this.attrs(handler)\n    }\n}",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "dccd9d5",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/MainScreen.kt",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/workflows/MainScreen.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/MainScreen.kt\nnew file mode 100644\nindex 0000000..dccd9d5\n--- /dev/null\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/MainScreen.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 107,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 107
          }
        ]
      }
    },
    {
      "rawTextOld": "package supercr.views\n\nimport AceEditor\nimport react.RBuilder\nimport react.RClass\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\n\nexternal interface CodeViewProps: RProps {\n    var codeText: String\n    var id: String\n    /** If present, will apply the clazzName to the editor */\n    var className: String\n}\n\n/**\n * A simple wrapper over [AceEditor] with sensible defaults\n */\nclass CodeView : RComponent<CodeViewProps, RState>() {\n    /** These are required to load the editor properly */\n    val ace = js(\"require('ace-builds/src-noconflict/ace')\")\n    val webpackResolver = js(\"require('ace-builds/webpack-resolver')\")\n    val theme = js(\"require('ace-builds/src-noconflict/theme-solarized_light')\")\n    val split = js(\"require('ace-builds/src-noconflict/ext-split')\")\n    override fun RBuilder.render() {\n        AceEditor {\n            attrs {\n                mode = \"java\"\n                theme = \"github\"\n                name = props.id\n                readOnly = true\n                value = props.codeText\n                width = \"inherit\"\n                highlightActiveLine = false\n                className = props.className\n            }\n        }\n    }\n}\n\nfun RBuilder.codeView(handler: CodeViewProps.() -> Unit): ReactElement {\n    return child(CodeView::class) {\n        this.attrs(handler)\n    }\n}\n",
      "rawTextNew": "package supercr.workflows.codereview.components\n\nimport AceEditor\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\n\nexternal interface CodeViewProps: RProps {\n    var codeText: String\n    var id: String\n    /** If present, will apply the clazzName to the editor */\n    var className: String\n}\n\n/**\n * A simple wrapper over [AceEditor] with sensible defaults\n */\nclass CodeView : RComponent<CodeViewProps, RState>() {\n    /** These are required to load the editor properly */\n    val ace = js(\"require('ace-builds/src-noconflict/ace')\")\n    val webpackResolver = js(\"require('ace-builds/webpack-resolver')\")\n    val theme = js(\"require('ace-builds/src-noconflict/theme-solarized_light')\")\n    val split = js(\"require('ace-builds/src-noconflict/ext-split')\")\n    override fun RBuilder.render() {\n        AceEditor {\n            attrs {\n                mode = \"java\"\n                theme = \"github\"\n                name = props.id\n                readOnly = true\n                value = props.codeText\n                width = \"inherit\"\n                highlightActiveLine = false\n                className = props.className\n            }\n        }\n    }\n}\n\nfun RBuilder.codeView(handler: CodeViewProps.() -> Unit): ReactElement {\n    return child(CodeView::class) {\n        this.attrs(handler)\n    }\n}\n",
      "diffChangeType": "RENAME",
      "fileHeader": {
        "identifier": "b9e5688",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/CodeView.kt",
        "fileOldPath": "kotlin/src/jsMain/kotlin/supercr/views/CodeView.kt",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/views/CodeView.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/CodeView.kt\nsimilarity index 96%\nrename from kotlin/src/jsMain/kotlin/supercr/views/CodeView.kt\nrename to kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/CodeView.kt\nindex 00d4f6b..b9e5688 100644\n--- a/kotlin/src/jsMain/kotlin/supercr/views/CodeView.kt\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/CodeView.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 1,
            "endB": 1,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          },
          {
            "beginA": 4,
            "beginB": 4,
            "endA": 5,
            "endB": 4,
            "editType": "DELETE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 0
          }
        ]
      }
    },
    {
      "rawTextOld": "package supercr.views\n\nimport AceEditor\nimport Grid\nimport Paper\nimport codereview.DiffEditType\nimport codereview.Edit\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.dom.p\nimport supercr.css.TextStyles\nimport supercr.processor.TextDiffProcessor\n\nexternal interface DiffViewProps: RProps {\n    var branchName: String\n    var oldText: String\n    var newText: String\n    var editList: List<Edit>\n    var identifier: String\n}\nexternal interface DiffViewState: RState {\n    var currentFileName: String\n}\n\nclass DiffView: RComponent<DiffViewProps, DiffViewState>() {\n    val ace = js(\"require('ace-builds/src-noconflict/ace')\")\n    private var leftEditor: dynamic = null\n    private var rightEditor: dynamic = null\n\n    override fun RBuilder.render() {\n        Grid {\n            attrs {\n                item = false\n                container = true\n                alignItems = \"center\"\n                direction = \"row\"\n                justify = \"center\"\n                spacing = 0\n            }\n            Grid {\n                attrs {\n                    item = true\n                    container = false\n                    xs = 6\n                }\n                codeView {\n                    id = leftEditorId()\n                    codeText = props.oldText\n                }\n            }\n            Grid {\n                attrs {\n                    item = true\n                    container = false\n                    xs = 6\n                }\n                codeView {\n                    id = rightEditorId()\n                    codeText = props.newText\n                }\n            }\n        }\n    }\n\n    override fun componentDidMount() {\n        leftEditor = ace.edit(leftEditorId())\n        rightEditor = ace.edit(rightEditorId())\n        TextDiffProcessor(leftEditor, rightEditor).processEditList(props.editList)\n//        Split(document.getElementById(\"main-editor\")!!, \"ace/theme/solarized_light\", 2)\n    }\n\n    private fun leftEditorId(): String {\n        return \"left-${props.identifier}\"\n    }\n\n    private fun rightEditorId(): String {\n        return \"right-${props.identifier}\"\n    }\n}\n\nfun RBuilder.diffView(handler: DiffViewProps.() -> Unit): ReactElement {\n    return child(DiffView::class) {\n        this.attrs(handler)\n    }\n}\n\n",
      "rawTextNew": "package supercr.workflows.codereview.components\n\nimport Grid\nimport codereview.Edit\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport supercr.workflows.codereview.processor.TextDiffProcessor\n\nexternal interface DiffViewProps: RProps {\n    var branchName: String\n    var oldText: String\n    var newText: String\n    var editList: List<Edit>\n    var identifier: String\n}\nexternal interface DiffViewState: RState {\n    var currentFileName: String\n}\n\nclass DiffView: RComponent<DiffViewProps, DiffViewState>() {\n    val ace = js(\"require('ace-builds/src-noconflict/ace')\")\n    private var leftEditor: dynamic = null\n    private var rightEditor: dynamic = null\n\n    override fun RBuilder.render() {\n        Grid {\n            attrs {\n                item = false\n                container = true\n                alignItems = \"center\"\n                direction = \"row\"\n                justify = \"center\"\n                spacing = 0\n            }\n            Grid {\n                attrs {\n                    item = true\n                    container = false\n                    xs = 6\n                }\n                codeView {\n                    id = leftEditorId()\n                    codeText = props.oldText\n                }\n            }\n            Grid {\n                attrs {\n                    item = true\n                    container = false\n                    xs = 6\n                }\n                codeView {\n                    id = rightEditorId()\n                    codeText = props.newText\n                }\n            }\n        }\n    }\n\n    override fun componentDidMount() {\n        leftEditor = ace.edit(leftEditorId())\n        rightEditor = ace.edit(rightEditorId())\n        TextDiffProcessor(leftEditor, rightEditor).processEditList(props.editList)\n//        Split(document.getElementById(\"main-editor\")!!, \"ace/theme/solarized_light\", 2)\n    }\n\n    private fun leftEditorId(): String {\n        return \"left-${props.identifier}\"\n    }\n\n    private fun rightEditorId(): String {\n        return \"right-${props.identifier}\"\n    }\n}\n\nfun RBuilder.diffView(handler: DiffViewProps.() -> Unit): ReactElement {\n    return child(DiffView::class) {\n        this.attrs(handler)\n    }\n}\n\n",
      "diffChangeType": "RENAME",
      "fileHeader": {
        "identifier": "4bc0d72",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/DiffView.kt",
        "fileOldPath": "kotlin/src/jsMain/kotlin/supercr/views/DiffView.kt",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/views/DiffView.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/DiffView.kt\nsimilarity index 92%\nrename from kotlin/src/jsMain/kotlin/supercr/views/DiffView.kt\nrename to kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/DiffView.kt\nindex 10052a4..4bc0d72 100644\n--- a/kotlin/src/jsMain/kotlin/supercr/views/DiffView.kt\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/DiffView.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 1,
            "endB": 1,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          },
          {
            "beginA": 2,
            "beginB": 2,
            "endA": 3,
            "endB": 2,
            "editType": "DELETE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 0
          },
          {
            "beginA": 4,
            "beginB": 3,
            "endA": 6,
            "endB": 3,
            "editType": "DELETE",
            "isEmpty": false,
            "lengthA": 2,
            "lengthB": 0
          },
          {
            "beginA": 12,
            "beginB": 9,
            "endA": 15,
            "endB": 10,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 3,
            "lengthB": 1
          }
        ]
      }
    },
    {
      "rawTextOld": "package supercr.views\n\nimport Avatar\nimport Grid\nimport ListItem\nimport ListSubHeader\nimport MaterialUIList\nimport codereview.FileDiff\nimport codereview.FileDiffList\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.setState\n\nenum class FileDiffListMode {\n    compact,\n    expanded\n}\n\nexternal interface FileListViewProps : RProps{\n    var fileList: FileDiffList\n    var mode: FileDiffListMode\n    var onFileSelect: (FileDiff?) -> Unit\n}\n\nexternal interface FileListViewState: RState {\n    var selectedIndex: Int?\n}\n\nclass FileListView: RComponent<FileListViewProps, FileListViewState>() {\n    override fun RBuilder.render() {\n        MaterialUIList {\n            ListSubHeader {\n                + \"Files\"\n            }\n            props.fileList.fileDiffs.mapIndexed { index, currentFileDiff ->\n                ListItem {\n                    attrs {\n                        button = true\n                        divider = true\n                        onClick = handleClick(index)\n                        selected\n                    }\n                    fileItem {\n                        fileDiff = currentFileDiff\n                    }\n                }\n            }\n        }\n    }\n\n    private fun handleClick(index: Int): () -> Unit {\n        return {\n            val (currentIndex, currentFileDiff) = if (state.selectedIndex != null && state.selectedIndex == index) {\n                /** Basically toggling */\n                Pair(null, null)\n            } else {\n                Pair(index, props.fileList.fileDiffs[index])\n            }\n            setState {\n                selectedIndex = currentIndex\n            }\n            props.onFileSelect(currentFileDiff)\n        }\n    }\n\n}\nfun RBuilder.fileList(handler: FileListViewProps.() -> Unit): ReactElement {\n    return child(FileListView::class) {\n        this.attrs(handler)\n    }\n}\n\n\nexternal interface FileItemProps: RProps {\n    var fileDiff: FileDiff\n}\n\nprivate class FileItem: RComponent<FileItemProps, RState>() {\n    override fun RBuilder.render() {\n        Grid {\n            attrs {\n                item = false\n                container = true\n                direction = \"row\"\n                justify = \"space-between\"\n                alignItems = \"center\"\n            }\n            Grid {\n                attrs {\n                    item = true\n                    container = false\n                    xs = 10\n                }\n//                    Paper {\n//                    p {\n                + props.fileDiff.fileHeader.fileNewPath.split(\"/\").last()\n//                    }\n//                    }\n            }\n            Grid {\n                attrs {\n                    item = true\n                    container = false\n                    xs = 2\n                }\n                Avatar {\n                    + \"XS\"\n                }\n            }\n        }\n    }\n\n}\n\nprivate fun RBuilder.fileItem(handler: FileItemProps.() -> Unit): ReactElement {\n    return child(FileItem::class) {\n        this.attrs(handler)\n    }\n}\n",
      "rawTextNew": "package supercr.workflows.codereview.components\n\nimport Avatar\nimport Grid\nimport ListItem\nimport ListSubHeader\nimport MaterialUIList\nimport codereview.FileDiff\nimport codereview.FileDiffList\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.setState\n\nenum class FileDiffListMode {\n    compact,\n    expanded\n}\n\nexternal interface FileListViewProps : RProps{\n    var fileList: FileDiffList\n    var mode: FileDiffListMode\n    var onFileSelect: (FileDiff?) -> Unit\n}\n\nexternal interface FileListViewState: RState {\n    var selectedIndex: Int?\n}\n\nclass FileListView: RComponent<FileListViewProps, FileListViewState>() {\n    override fun RBuilder.render() {\n        MaterialUIList {\n            ListSubHeader {\n                + \"Files\"\n            }\n            props.fileList.fileDiffs.mapIndexed { index, currentFileDiff ->\n                ListItem {\n                    attrs {\n                        button = true\n                        divider = true\n                        onClick = handleClick(index)\n                        selected\n                    }\n                    fileItem {\n                        fileDiff = currentFileDiff\n                    }\n                }\n            }\n        }\n    }\n\n    private fun handleClick(index: Int): () -> Unit {\n        return {\n            val (currentIndex, currentFileDiff) = if (state.selectedIndex != null && state.selectedIndex == index) {\n                /** Basically toggling */\n                Pair(null, null)\n            } else {\n                Pair(index, props.fileList.fileDiffs[index])\n            }\n            setState {\n                selectedIndex = currentIndex\n            }\n            props.onFileSelect(currentFileDiff)\n        }\n    }\n\n}\nfun RBuilder.fileList(handler: FileListViewProps.() -> Unit): ReactElement {\n    return child(FileListView::class) {\n        this.attrs(handler)\n    }\n}\n\n\nexternal interface FileItemProps: RProps {\n    var fileDiff: FileDiff\n}\n\nprivate class FileItem: RComponent<FileItemProps, RState>() {\n    override fun RBuilder.render() {\n        Grid {\n            attrs {\n                item = false\n                container = true\n                direction = \"row\"\n                justify = \"space-between\"\n                alignItems = \"center\"\n            }\n            Grid {\n                attrs {\n                    item = true\n                    container = false\n                    xs = 10\n                }\n//                    Paper {\n//                    p {\n                + props.fileDiff.fileHeader.fileNewPath.split(\"/\").last()\n//                    }\n//                    }\n            }\n            Grid {\n                attrs {\n                    item = true\n                    container = false\n                    xs = 2\n                }\n                Avatar {\n                    + \"XS\"\n                }\n            }\n        }\n    }\n\n}\n\nprivate fun RBuilder.fileItem(handler: FileItemProps.() -> Unit): ReactElement {\n    return child(FileItem::class) {\n        this.attrs(handler)\n    }\n}\n",
      "diffChangeType": "RENAME",
      "fileHeader": {
        "identifier": "1c27dcb",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/FileListView.kt",
        "fileOldPath": "kotlin/src/jsMain/kotlin/supercr/views/FileListView.kt",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/views/FileListView.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/FileListView.kt\nsimilarity index 98%\nrename from kotlin/src/jsMain/kotlin/supercr/views/FileListView.kt\nrename to kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/FileListView.kt\nindex f63509e..1c27dcb 100644\n--- a/kotlin/src/jsMain/kotlin/supercr/views/FileListView.kt\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/FileListView.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 1,
            "endB": 1,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          }
        ]
      }
    },
    {
      "rawTextOld": "package supercr.views\n\nimport Grid\nimport Paper\nimport codereview.DiffChangeType\nimport codereview.FileDiff\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.dom.p\nimport supercr.css.TextStyles\n\n/**\n * Show the diff/details for a file.\n * Depending on whether the file is new/modified/deleted, we can show it in a different way\n */\nexternal interface FileViewProps: RProps {\n    var fileDiff: FileDiff\n}\n\nexternal interface FileViewState: RState {\n\n}\n\nclass FileView : RComponent<FileViewProps, FileViewState>() {\n    override fun RBuilder.render() {\n        Grid {\n            attrs {\n                item = false\n                container = true\n                alignItems = \"center\"\n                direction = \"row\"\n                justify = \"center\"\n                spacing = 0\n            }\n            renderDiffView()\n        }\n    }\n\n    private fun RBuilder.renderDiffView() : ReactElement {\n        return when(props.fileDiff.diffChangeType) {\n            DiffChangeType.MODIFY -> renderDiffViewForModifiedFile()\n            DiffChangeType.COPY -> TODO()\n            DiffChangeType.RENAME -> renderDiffViewForRenamedFile()\n            DiffChangeType.DELETE -> renderViewForRemovedFile()\n            DiffChangeType.ADD -> renderViewForNewFile()\n        }\n    }\n\n    private fun RBuilder.renderViewForNewFile(): ReactElement {\n        return Grid {\n            attrs {\n                item = true\n                container = false\n                xs = 12\n            }\n            Paper {\n                attrs {\n                    square = true\n                    variant = \"outlined\"\n                }\n                p {\n                    +props.fileDiff.fileHeader.fileNewPath\n                }\n            }\n            Grid {\n                attrs {\n                    container = true\n                    item = false\n                    justify = \"space-evenly\"\n                    spacing = 2\n                }\n                Grid {\n                    attrs {\n                        item = true\n                        container = false\n                        xs = 2\n                    }\n                    Paper {\n\n                    }\n                }\n                renderAceEditorForSingleFiles(props.fileDiff.rawTextNew ?: \"\", xsValToUse = 10, classNameToUse = TextStyles.insertedTextNew)\n            }\n        }\n    }\n\n    private fun RBuilder.renderViewForRemovedFile(): ReactElement {\n        return Grid {\n            attrs {\n                item = true\n                container = false\n                xs = 12\n            }\n            Paper {\n                attrs {\n                    square = true\n                    variant = \"outlined\"\n                }\n                p {\n                    +props.fileDiff.fileHeader.fileOldPath\n                }\n            }\n            Grid {\n                attrs {\n                    container = true\n                    item = false\n                    justify = \"space-evenly\"\n                    spacing = 2\n                }\n                renderAceEditorForSingleFiles(props.fileDiff.rawTextOld ?: \"\", xsValToUse = 10, classNameToUse = TextStyles.removedText)\n                Grid {\n                    attrs {\n                        item = true\n                        container = false\n                        xs = 2\n                    }\n                    Paper {\n\n                    }\n                }\n            }\n        }\n    }\n\n    private fun RBuilder.renderAceEditorForSingleFiles(text: String, xsValToUse: Number, classNameToUse: String): ReactElement {\n        return Grid {\n            attrs {\n                item = true\n                container = false\n                xs = xsValToUse\n            }\n            codeView {\n                id = props.fileDiff.fileHeader.identifier\n                codeText = text\n                className = classNameToUse\n            }\n        }\n    }\n\n    private fun RBuilder.renderDiffViewForRenamedFile(): ReactElement {\n        return Grid {\n            attrs {\n                container = true\n                xs = 12\n                spacing = 0\n                direction = \"row\"\n                alignItems = \"center\"\n                justify = \"space-evenly\"\n            }\n            Grid {\n                attrs {\n                    xs = 6\n                }\n                Paper {\n                    attrs {\n                        square = true\n                        variant = \"outlined\"\n                    }\n                    p {\n                        + \"${ props.fileDiff.fileHeader.fileOldPath } -> \"\n                    }\n                }\n            }\n            Grid {\n                attrs {\n                    xs = 6\n                }\n                Paper {\n                    attrs {\n                        square = true\n                        variant = \"outlined\"\n                    }\n                    p {\n                        + props.fileDiff.fileHeader.fileNewPath\n                    }\n                }\n            }\n            renderDiffPane()\n        }\n    }\n\n    private fun RBuilder.renderDiffViewForModifiedFile(): ReactElement {\n        return Grid {\n            attrs {\n                item = true\n                container = false\n                xs = 12\n            }\n            Paper {\n                attrs {\n                    square = true\n                    variant = \"outlined\"\n                }\n                p {\n                    + props.fileDiff.fileHeader.fileNewPath\n                }\n            }\n            renderDiffPane()\n        }\n    }\n\n    /**\n     * Renders a [DiffView] in a [Grid] item with the given xs value\n      */\n    private fun RBuilder.renderDiffPane(xsValToUse: Number = 12) : ReactElement {\n        return Grid {\n            attrs {\n                item = true\n                container = false\n                xs = xsValToUse\n            }\n            diffView {\n                oldText = props.fileDiff.rawTextOld?:\"\"\n                newText = props.fileDiff.rawTextNew?:\"\"\n                editList = props.fileDiff.fileHeader.editList\n                identifier = props.fileDiff.fileHeader.identifier\n            }\n        }\n    }\n}\nfun RBuilder.fileView(handler: FileViewProps.() -> Unit): ReactElement {\n    return child(FileView::class) {\n        this.attrs(handler)\n    }\n}\n",
      "rawTextNew": "package supercr.workflows.codereview.components\n\nimport Grid\nimport Paper\nimport codereview.DiffChangeType\nimport codereview.FileDiff\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.dom.p\nimport supercr.css.TextStyles\n\n/**\n * Show the diff/details for a file.\n * Depending on whether the file is new/modified/deleted, we can show it in a different way\n */\nexternal interface FileViewProps: RProps {\n    var fileDiff: FileDiff\n}\n\nexternal interface FileViewState: RState {\n\n}\n\nclass FileView : RComponent<FileViewProps, FileViewState>() {\n    override fun RBuilder.render() {\n        Grid {\n            attrs {\n                item = false\n                container = true\n                alignItems = \"center\"\n                direction = \"row\"\n                justify = \"center\"\n                spacing = 0\n            }\n            renderDiffView()\n        }\n    }\n\n    private fun RBuilder.renderDiffView() : ReactElement {\n        return when(props.fileDiff.diffChangeType) {\n            DiffChangeType.MODIFY -> renderDiffViewForModifiedFile()\n            DiffChangeType.COPY -> TODO()\n            DiffChangeType.RENAME -> renderDiffViewForRenamedFile()\n            DiffChangeType.DELETE -> renderViewForRemovedFile()\n            DiffChangeType.ADD -> renderViewForNewFile()\n        }\n    }\n\n    private fun RBuilder.renderViewForNewFile(): ReactElement {\n        return Grid {\n            attrs {\n                item = true\n                container = false\n                xs = 12\n            }\n            Paper {\n                attrs {\n                    square = true\n                    variant = \"outlined\"\n                }\n                p {\n                    +props.fileDiff.fileHeader.fileNewPath\n                }\n            }\n            Grid {\n                attrs {\n                    container = true\n                    item = false\n                    justify = \"space-evenly\"\n                    spacing = 2\n                }\n                Grid {\n                    attrs {\n                        item = true\n                        container = false\n                        xs = 2\n                    }\n                    Paper {\n\n                    }\n                }\n                renderAceEditorForSingleFiles(props.fileDiff.rawTextNew ?: \"\", xsValToUse = 10, classNameToUse = TextStyles.insertedTextNew)\n            }\n        }\n    }\n\n    private fun RBuilder.renderViewForRemovedFile(): ReactElement {\n        return Grid {\n            attrs {\n                item = true\n                container = false\n                xs = 12\n            }\n            Paper {\n                attrs {\n                    square = true\n                    variant = \"outlined\"\n                }\n                p {\n                    +props.fileDiff.fileHeader.fileOldPath\n                }\n            }\n            Grid {\n                attrs {\n                    container = true\n                    item = false\n                    justify = \"space-evenly\"\n                    spacing = 2\n                }\n                renderAceEditorForSingleFiles(props.fileDiff.rawTextOld ?: \"\", xsValToUse = 10, classNameToUse = TextStyles.removedText)\n                Grid {\n                    attrs {\n                        item = true\n                        container = false\n                        xs = 2\n                    }\n                    Paper {\n\n                    }\n                }\n            }\n        }\n    }\n\n    private fun RBuilder.renderAceEditorForSingleFiles(text: String, xsValToUse: Number, classNameToUse: String): ReactElement {\n        return Grid {\n            attrs {\n                item = true\n                container = false\n                xs = xsValToUse\n            }\n            codeView {\n                id = props.fileDiff.fileHeader.identifier\n                codeText = text\n                className = classNameToUse\n            }\n        }\n    }\n\n    private fun RBuilder.renderDiffViewForRenamedFile(): ReactElement {\n        return Grid {\n            attrs {\n                container = true\n                xs = 12\n                spacing = 0\n                direction = \"row\"\n                alignItems = \"center\"\n                justify = \"space-evenly\"\n            }\n            Grid {\n                attrs {\n                    xs = 6\n                }\n                Paper {\n                    attrs {\n                        square = true\n                        variant = \"outlined\"\n                    }\n                    p {\n                        + \"${ props.fileDiff.fileHeader.fileOldPath } -> \"\n                    }\n                }\n            }\n            Grid {\n                attrs {\n                    xs = 6\n                }\n                Paper {\n                    attrs {\n                        square = true\n                        variant = \"outlined\"\n                    }\n                    p {\n                        + props.fileDiff.fileHeader.fileNewPath\n                    }\n                }\n            }\n            renderDiffPane()\n        }\n    }\n\n    private fun RBuilder.renderDiffViewForModifiedFile(): ReactElement {\n        return Grid {\n            attrs {\n                item = true\n                container = false\n                xs = 12\n            }\n            Paper {\n                attrs {\n                    square = true\n                    variant = \"outlined\"\n                }\n                p {\n                    + props.fileDiff.fileHeader.fileNewPath\n                }\n            }\n            renderDiffPane()\n        }\n    }\n\n    /**\n     * Renders a [DiffView] in a [Grid] item with the given xs value\n      */\n    private fun RBuilder.renderDiffPane(xsValToUse: Number = 12) : ReactElement {\n        return Grid {\n            attrs {\n                item = true\n                container = false\n                xs = xsValToUse\n            }\n            diffView {\n                oldText = props.fileDiff.rawTextOld?:\"\"\n                newText = props.fileDiff.rawTextNew?:\"\"\n                editList = props.fileDiff.fileHeader.editList\n                identifier = props.fileDiff.fileHeader.identifier\n            }\n        }\n    }\n}\nfun RBuilder.fileView(handler: FileViewProps.() -> Unit): ReactElement {\n    return child(FileView::class) {\n        this.attrs(handler)\n    }\n}\n",
      "diffChangeType": "RENAME",
      "fileHeader": {
        "identifier": "edb58a3",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/FileView.kt",
        "fileOldPath": "kotlin/src/jsMain/kotlin/supercr/views/FileView.kt",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/views/FileView.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/FileView.kt\nsimilarity index 98%\nrename from kotlin/src/jsMain/kotlin/supercr/views/FileView.kt\nrename to kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/FileView.kt\nindex 520c91f..edb58a3 100644\n--- a/kotlin/src/jsMain/kotlin/supercr/views/FileView.kt\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/components/FileView.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 1,
            "endB": 1,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          }
        ]
      }
    },
    {
      "rawTextOld": "package supercr.processor\n\nimport JsDiffResult\nimport diffWords\n\nenum class HighlightType {\n    TextAdded,\n    TextRemoved\n}\n\n/**\n * Essentially stores 'marker' information to word/character level differences between two lines of text\n * The range [fromColumn] and [toColumn] is inclusive\n */\ndata class VimDiffRowMarker(\n    val fromColumn: Long,\n    val toColumn: Long,\n    val highlightType: HighlightType\n)\n\nprivate enum class JsDiffType {\n    Added,\n    Removed,\n    Same\n}\n\nclass LineDiffProcessor {\n    companion object {\n        /**\n         * For given two lines of text, this method returns a Pair of lists of [VimDiffRowMarker]\n         * First part of the Pair is a list of markers to be applied to the editor displaying the [oldLine]\n         * Second part of the Pair is a list of markers to be applied to the editor displaying the [newLine]\n         * We could have returned a single list of markers as well, considering a [HighlightType.TextAdded] would never appear in the first part of the result pair\n         * Similarly, a [HighlightType.TextRemoved] would never appear in the 2nd part of the pair.\n         */\n        fun getDiffMarkers(oldLine: String, newLine: String): Pair<List<VimDiffRowMarker>, List<VimDiffRowMarker>> {\n            val diff = diffWords(oldLine, newLine)\n            val initialAccumulator = Triple(0L, 0L, listOf<VimDiffRowMarker>())\n            return diff.fold(initialAccumulator) { (oldTextIndex, newTextIndex, accumulatedMarkers), currentDiff ->\n                when(currentDiff.getType()) {\n                    JsDiffType.Added -> {\n                        /** Move the index only newText and create a marker */\n                        val newMarker = VimDiffRowMarker(fromColumn = newTextIndex, toColumn = newTextIndex + currentDiff.value.length - 1, highlightType = HighlightType.TextAdded)\n                        Triple(oldTextIndex, newTextIndex + currentDiff.value.length, accumulatedMarkers.plus(newMarker))\n                    }\n                    JsDiffType.Removed -> {\n                        /** Move the index only for oldText and create a marker */\n                        val marker = VimDiffRowMarker(fromColumn = oldTextIndex, toColumn = oldTextIndex + currentDiff.value.length - 1, highlightType = HighlightType.TextRemoved)\n                        Triple(oldTextIndex + currentDiff.value.length, newTextIndex, accumulatedMarkers.plus(marker))\n                    }\n                    JsDiffType.Same -> {\n                        /** There won't be a new Marker - we just forward the indexes */\n                        Triple(oldTextIndex + currentDiff.value.length, newTextIndex + currentDiff.value.length , accumulatedMarkers)\n                    }\n                }\n            }.let { (oldTextIndex, newTextIndex, accumulatedMarkers) ->\n                require(oldTextIndex.toInt() == oldLine.length) {\n                    \"For some reason, for the oldLine, We got only up to $oldTextIndex whereas we should have got up till ${oldLine.length}\"\n                }\n                require(newTextIndex.toInt() == newLine.length) {\n                    \"For some reason, for the newLine, We got only up to $newTextIndex whereas we should have got up till ${newLine.length}\"\n                }\n                Pair(\n                    first = accumulatedMarkers.filter { it.highlightType == HighlightType.TextRemoved },\n                    second = accumulatedMarkers.filter { it.highlightType == HighlightType.TextAdded }\n                )\n            }\n        }\n\n        private fun JsDiffResult.getType(): JsDiffType {\n            return if(this.added == null && this.removed == null) {\n                JsDiffType.Same\n            } else if (this.added == true) {\n                JsDiffType.Added\n            } else {\n                JsDiffType.Removed\n            }\n        }\n    }\n}",
      "rawTextNew": "package supercr.workflows.codereview.processor\n\nimport JsDiffResult\nimport diffWords\n\nenum class HighlightType {\n    TextAdded,\n    TextRemoved\n}\n\n/**\n * Essentially stores 'marker' information to word/character level differences between two lines of text\n * The range [fromColumn] and [toColumn] is inclusive\n */\ndata class VimDiffRowMarker(\n    val fromColumn: Long,\n    val toColumn: Long,\n    val highlightType: HighlightType\n)\n\nprivate enum class JsDiffType {\n    Added,\n    Removed,\n    Same\n}\n\nclass LineDiffProcessor {\n    companion object {\n        /**\n         * For given two lines of text, this method returns a Pair of lists of [VimDiffRowMarker]\n         * First part of the Pair is a list of markers to be applied to the editor displaying the [oldLine]\n         * Second part of the Pair is a list of markers to be applied to the editor displaying the [newLine]\n         * We could have returned a single list of markers as well, considering a [HighlightType.TextAdded] would never appear in the first part of the result pair\n         * Similarly, a [HighlightType.TextRemoved] would never appear in the 2nd part of the pair.\n         */\n        fun getDiffMarkers(oldLine: String, newLine: String): Pair<List<VimDiffRowMarker>, List<VimDiffRowMarker>> {\n            val diff = diffWords(oldLine, newLine)\n            val initialAccumulator = Triple(0L, 0L, listOf<VimDiffRowMarker>())\n            return diff.fold(initialAccumulator) { (oldTextIndex, newTextIndex, accumulatedMarkers), currentDiff ->\n                when(currentDiff.getType()) {\n                    JsDiffType.Added -> {\n                        /** Move the index only newText and create a marker */\n                        val newMarker = VimDiffRowMarker(fromColumn = newTextIndex, toColumn = newTextIndex + currentDiff.value.length - 1, highlightType = HighlightType.TextAdded)\n                        Triple(oldTextIndex, newTextIndex + currentDiff.value.length, accumulatedMarkers.plus(newMarker))\n                    }\n                    JsDiffType.Removed -> {\n                        /** Move the index only for oldText and create a marker */\n                        val marker = VimDiffRowMarker(fromColumn = oldTextIndex, toColumn = oldTextIndex + currentDiff.value.length - 1, highlightType = HighlightType.TextRemoved)\n                        Triple(oldTextIndex + currentDiff.value.length, newTextIndex, accumulatedMarkers.plus(marker))\n                    }\n                    JsDiffType.Same -> {\n                        /** There won't be a new Marker - we just forward the indexes */\n                        Triple(oldTextIndex + currentDiff.value.length, newTextIndex + currentDiff.value.length , accumulatedMarkers)\n                    }\n                }\n            }.let { (oldTextIndex, newTextIndex, accumulatedMarkers) ->\n                require(oldTextIndex.toInt() == oldLine.length) {\n                    \"For some reason, for the oldLine, We got only up to $oldTextIndex whereas we should have got up till ${oldLine.length}\"\n                }\n                require(newTextIndex.toInt() == newLine.length) {\n                    \"For some reason, for the newLine, We got only up to $newTextIndex whereas we should have got up till ${newLine.length}\"\n                }\n                Pair(\n                    first = accumulatedMarkers.filter { it.highlightType == HighlightType.TextRemoved },\n                    second = accumulatedMarkers.filter { it.highlightType == HighlightType.TextAdded }\n                )\n            }\n        }\n\n        private fun JsDiffResult.getType(): JsDiffType {\n            return if(this.added == null && this.removed == null) {\n                JsDiffType.Same\n            } else if (this.added == true) {\n                JsDiffType.Added\n            } else {\n                JsDiffType.Removed\n            }\n        }\n    }\n}",
      "diffChangeType": "RENAME",
      "fileHeader": {
        "identifier": "7750280",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/codereview/processor/LineDiffProcessor.kt",
        "fileOldPath": "kotlin/src/jsMain/kotlin/supercr/processor/LineDiffProcessor.kt",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/processor/LineDiffProcessor.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/processor/LineDiffProcessor.kt\nsimilarity index 98%\nrename from kotlin/src/jsMain/kotlin/supercr/processor/LineDiffProcessor.kt\nrename to kotlin/src/jsMain/kotlin/supercr/workflows/codereview/processor/LineDiffProcessor.kt\nindex a849ade..7750280 100644\n--- a/kotlin/src/jsMain/kotlin/supercr/processor/LineDiffProcessor.kt\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/processor/LineDiffProcessor.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 1,
            "endB": 1,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          }
        ]
      }
    },
    {
      "rawTextOld": "package supercr.processor\n\nimport Range\nimport codereview.DiffEditType\nimport codereview.Edit\nimport supercr.css.TextStyles\n\n/**\n * Basically used to create appropriate decorations in our text editors\n */\nclass TextDiffProcessor constructor(\n    private val editorWithOldText: dynamic,\n    private val editorWithNewText: dynamic\n) {\n    /**\n     * Process the [editList] to highlight the diff in oth the editors\n     */\n    fun processEditList(editList: List<Edit>) {\n        editList.fold(initial = 0L) { numLinesAddedToRightEditor, currentEdit ->\n            /**\n             * Basically, we base all our highlights with the 'right hand side' offsets.\n             * Which means that if we want to highlight the 'changed' lines on the left hand side of the diff,\n             * we derive the line numbers using the 'right hand side' - [Edit.beginB] as the offset.\n             * Of course, the [Edit] list line numbers are of the original source.\n             * While showing the diff, we may insert some lines on the right hand side as well (in the case of deleted lines, for eg)\n             * Which means we need to keep a track of how many lines we've inserted in the right side, which is captured in the accumulator here\n             *\n             * Note: Given the logic explained above, it is important that we _always_ process [editorWithOldText] and then [editorWithNewText]\n             */\n            val numLinesAddedForCurrentEdit = currentEdit.processEdit(numLinesAddedToRightEditor)\n//            currentEdit.processForOldEditor(numLinesAddedToRightEditor, editorWithOldText)\n//            val numLinesAddedForCurrentEdit = currentEdit.processForNewEditor(numLinesAddedToRightEditor, editorWithNewText)\n            numLinesAddedToRightEditor + numLinesAddedForCurrentEdit\n        }\n    }\n\n    private fun Edit.processEdit(offset: Long): Long {\n        /**\n         * The region highlighted by [Edit.beginA] to [Edit.endA] has been 'replaced' _in the original \"text\" document\n         * Note that if there were any INSERTS or REPLACES in the [editorWithOldText] before this, then those would have\n         * brought the 'document' lines in the [editorWithOldText] at par with lines in [editorWithNewText]\n         * Thus, we always use [Edit.beginB] as the starting point of the region to highlight in all of the following methods\n         *\n         */\n        return when(editType) {\n            DiffEditType.INSERT -> {\n                processInsertForOldEditor(offset)\n                processInsertForNewEditor(offset)\n                0L\n            }\n            DiffEditType.DELETE -> {\n                processDeleteForOldEditor(offset)\n                processDeleteForNewEditor(offset)\n            }\n            DiffEditType.REPLACE -> {\n                /** If there is new text on the right hand side, that means we have to fill empty lines */\n                if (lengthB > lengthA) {\n                    val numLines = lengthB - lengthA\n                    insertEmptyLinesAt(editor = editorWithOldText, rowNumber = beginB + offset + lengthA, numLines = numLines)\n                    highlighLinesWithGutter(editorWithOldText, beginB + offset + lengthA, numLines, TextStyles.textInsertedForBalance)\n                }\n                /** At this point, we have the same number or rows to process in both [editorWithOldText] and [editorWithNewText] */\n                val fromRow = beginB + offset\n                val upTillRow = fromRow + lengthB\n                (fromRow until upTillRow).map { rowIndex ->\n                    val oldText = getLineAt(rowIndex, editorWithOldText)\n                    val newText = getLineAt(rowIndex, editorWithNewText)\n                    LineDiffProcessor.getDiffMarkers(oldText, newText)\n                        .let { (markersForOldTextEditor, markersForNewTextEditor) ->\n                            // TODO : If the diff marker starts at column '0', then we highlight the section starting with column 0. This leaves a small gap between the gutter and the starting of the highlight. Fix that\n                            markersForOldTextEditor.map { marker ->\n                                highlightLineSection(\n                                    rowIndex = rowIndex,\n                                    fromColumn = marker.fromColumn,\n                                    toColumn = marker.toColumn,\n                                    editor = editorWithOldText,\n                                    cssClazz = when(marker.highlightType) {\n                                        HighlightType.TextAdded -> TextStyles.insertedTextNew\n                                        HighlightType.TextRemoved -> TextStyles.removedText\n                                    }\n                                )\n                            }\n                            markersForNewTextEditor.map { marker ->\n                                highlightLineSection(\n                                    rowIndex = rowIndex,\n                                    fromColumn = marker.fromColumn,\n                                    toColumn = marker.toColumn,\n                                    editor = editorWithNewText,\n                                    cssClazz = when(marker.highlightType) {\n                                        HighlightType.TextAdded -> TextStyles.insertedTextNew\n                                        HighlightType.TextRemoved -> TextStyles.removedText\n                                    }\n                                )\n                            }\n                        }\n\n                }\n                /** Finally, highlight the gutters */\n                highlightGutter(editor = editorWithNewText, fromRow = beginB + offset, numLines = lengthB, cssClazz = TextStyles.insertedTextNew)\n                highlightGutter(editor = editorWithOldText, fromRow = beginB + offset, numLines = lengthA, cssClazz = TextStyles.removedText)\n                0L\n            }\n            DiffEditType.EMPTY -> TODO()\n        }\n    }\n\n    private fun getLineAt(rowIndex: Long, editor: dynamic): String {\n        return ( editor.getSession().getLine(rowIndex.toDouble()) as String )\n    }\n\n    private fun highlightLineSection(rowIndex: Long, fromColumn: Long, toColumn: Long, editor: dynamic, cssClazz: String) {\n        editor.getSession().addMarker(\n            Range(rowIndex.toDouble(), fromColumn.toDouble(), rowIndex.toDouble(), toColumn.toDouble()),\n            cssClazz,\n            \"text\",\n            false\n        )\n    }\n\n    private fun Edit.processInsertForOldEditor(offset: Long) {\n        val numLines = lengthB - lengthA\n        insertEmptyLinesAt(editor = editorWithOldText, rowNumber = beginB + offset, numLines = numLines)\n        highlighLinesWithGutter(editorWithOldText, beginB + offset, numLines, TextStyles.textInsertedForBalance)\n    }\n\n    private fun Edit.processInsertForNewEditor(offset: Long) {\n        highlighLinesWithGutter(editor = editorWithNewText, fromRow = beginB + offset, numLines = lengthB, cssClazz = TextStyles.insertedTextNew)\n    }\n\n    private fun Edit.processDeleteForNewEditor(offset: Long): Long {\n        val numLinesInDocument = editorWithNewText.getSession().getLength() as Number\n        return if (numLinesInDocument.toLong() - 1 <= endB  )  {\n            /** Handle deletions at end of file */\n            insertEmptyLinesAt(editor = editorWithNewText ,rowNumber = numLinesInDocument.toLong(),  numLines = lengthB + 1)\n            highlighLinesWithGutter(editorWithNewText, numLinesInDocument.toLong(), lengthB + 1, TextStyles.textInsertedForBalance)\n            0L\n        } else {\n            /** We are not at the end of file */\n            insertEmptyLinesAt(editor = editorWithNewText ,rowNumber = beginB + offset,  numLines = lengthA)\n            highlighLinesWithGutter(editorWithNewText, beginB + offset, lengthA, TextStyles.textInsertedForBalance)\n            lengthA\n        }\n    }\n\n    private fun Edit.processDeleteForOldEditor(offset: Long) {\n        /** [Edit.beginA] and [Edit.endA] denote the line numbers of the _old_ text\n         * We must use the line numbers of the new text - denoted by [Edit.beginB] and [Edit.endB] to\n         * highlight the part that was _removed_ from old text\n         */\n        highlighLinesWithGutter(editorWithOldText, beginB + offset, lengthA, TextStyles.removedText)\n    }\n\n    private fun highlighLinesWithGutter(editor: dynamic, fromRow: Long, numLines: Long, cssClazz: String) {\n        highlightLines(editor, fromRow, numLines, cssClazz)\n        highlightGutter(editor, fromRow, numLines, cssClazz)\n    }\n\n    private fun highlightLines(editor: dynamic, fromRow: Long, numLines: Long, cssClazz: String) {\n        editor.getSession().highlightLines(fromRow.toDouble(), ( fromRow + numLines - 1 ) .toDouble(), cssClazz)\n    }\n\n    private fun highlightGutter(editor: dynamic ,fromRow: Long, numLines: Long, cssClazz: String) {\n        (fromRow until (fromRow + numLines)).map { rowNumber ->\n            editor.getSession().addGutterDecoration(rowNumber.toDouble() , cssClazz)\n        }\n    }\n\n    private fun insertEmptyLinesAt(editor: dynamic, rowNumber: Long,numLines: Long) {\n        val emptyLinesArray = generateEmptyLineArray(numLines)\n        editor.getSession().getDocument().insertFullLines(rowNumber, emptyLinesArray)\n    }\n\n    private fun generateEmptyLineArray(numLines: Long) = Array(numLines.toInt()) { \"\" }\n\n}",
      "rawTextNew": "package supercr.workflows.codereview.processor\n\nimport Range\nimport codereview.DiffEditType\nimport codereview.Edit\nimport supercr.css.TextStyles\n\n/**\n * Basically used to create appropriate decorations in our text editors\n */\nclass TextDiffProcessor constructor(\n    private val editorWithOldText: dynamic,\n    private val editorWithNewText: dynamic\n) {\n    /**\n     * Process the [editList] to highlight the diff in oth the editors\n     */\n    fun processEditList(editList: List<Edit>) {\n        editList.fold(initial = 0L) { numLinesAddedToRightEditor, currentEdit ->\n            /**\n             * Basically, we base all our highlights with the 'right hand side' offsets.\n             * Which means that if we want to highlight the 'changed' lines on the left hand side of the diff,\n             * we derive the line numbers using the 'right hand side' - [Edit.beginB] as the offset.\n             * Of course, the [Edit] list line numbers are of the original source.\n             * While showing the diff, we may insert some lines on the right hand side as well (in the case of deleted lines, for eg)\n             * Which means we need to keep a track of how many lines we've inserted in the right side, which is captured in the accumulator here\n             *\n             * Note: Given the logic explained above, it is important that we _always_ process [editorWithOldText] and then [editorWithNewText]\n             */\n            val numLinesAddedForCurrentEdit = currentEdit.processEdit(numLinesAddedToRightEditor)\n//            currentEdit.processForOldEditor(numLinesAddedToRightEditor, editorWithOldText)\n//            val numLinesAddedForCurrentEdit = currentEdit.processForNewEditor(numLinesAddedToRightEditor, editorWithNewText)\n            numLinesAddedToRightEditor + numLinesAddedForCurrentEdit\n        }\n    }\n\n    private fun Edit.processEdit(offset: Long): Long {\n        /**\n         * The region highlighted by [Edit.beginA] to [Edit.endA] has been 'replaced' _in the original \"text\" document\n         * Note that if there were any INSERTS or REPLACES in the [editorWithOldText] before this, then those would have\n         * brought the 'document' lines in the [editorWithOldText] at par with lines in [editorWithNewText]\n         * Thus, we always use [Edit.beginB] as the starting point of the region to highlight in all of the following methods\n         *\n         */\n        return when(editType) {\n            DiffEditType.INSERT -> {\n                processInsertForOldEditor(offset)\n                processInsertForNewEditor(offset)\n                0L\n            }\n            DiffEditType.DELETE -> {\n                processDeleteForOldEditor(offset)\n                processDeleteForNewEditor(offset)\n            }\n            DiffEditType.REPLACE -> {\n                /** If there is new text on the right hand side, that means we have to fill empty lines */\n                if (lengthB > lengthA) {\n                    val numLines = lengthB - lengthA\n                    insertEmptyLinesAt(editor = editorWithOldText, rowNumber = beginB + offset + lengthA, numLines = numLines)\n                    highlighLinesWithGutter(editorWithOldText, beginB + offset + lengthA, numLines, TextStyles.textInsertedForBalance)\n                }\n                /** At this point, we have the same number or rows to process in both [editorWithOldText] and [editorWithNewText] */\n                val fromRow = beginB + offset\n                val upTillRow = fromRow + lengthB\n                (fromRow until upTillRow).map { rowIndex ->\n                    val oldText = getLineAt(rowIndex, editorWithOldText)\n                    val newText = getLineAt(rowIndex, editorWithNewText)\n                    LineDiffProcessor.getDiffMarkers(oldText, newText)\n                        .let { (markersForOldTextEditor, markersForNewTextEditor) ->\n                            // TODO : If the diff marker starts at column '0', then we highlight the section starting with column 0. This leaves a small gap between the gutter and the starting of the highlight. Fix that\n                            markersForOldTextEditor.map { marker ->\n                                highlightLineSection(\n                                    rowIndex = rowIndex,\n                                    fromColumn = marker.fromColumn,\n                                    toColumn = marker.toColumn,\n                                    editor = editorWithOldText,\n                                    cssClazz = when(marker.highlightType) {\n                                        HighlightType.TextAdded -> TextStyles.insertedTextNew\n                                        HighlightType.TextRemoved -> TextStyles.removedText\n                                    }\n                                )\n                            }\n                            markersForNewTextEditor.map { marker ->\n                                highlightLineSection(\n                                    rowIndex = rowIndex,\n                                    fromColumn = marker.fromColumn,\n                                    toColumn = marker.toColumn,\n                                    editor = editorWithNewText,\n                                    cssClazz = when(marker.highlightType) {\n                                        HighlightType.TextAdded -> TextStyles.insertedTextNew\n                                        HighlightType.TextRemoved -> TextStyles.removedText\n                                    }\n                                )\n                            }\n                        }\n\n                }\n                /** Finally, highlight the gutters */\n                highlightGutter(editor = editorWithNewText, fromRow = beginB + offset, numLines = lengthB, cssClazz = TextStyles.insertedTextNew)\n                highlightGutter(editor = editorWithOldText, fromRow = beginB + offset, numLines = lengthA, cssClazz = TextStyles.removedText)\n                0L\n            }\n            DiffEditType.EMPTY -> TODO()\n        }\n    }\n\n    private fun getLineAt(rowIndex: Long, editor: dynamic): String {\n        return ( editor.getSession().getLine(rowIndex.toDouble()) as String )\n    }\n\n    private fun highlightLineSection(rowIndex: Long, fromColumn: Long, toColumn: Long, editor: dynamic, cssClazz: String) {\n        editor.getSession().addMarker(\n            Range(rowIndex.toDouble(), fromColumn.toDouble(), rowIndex.toDouble(), toColumn.toDouble()),\n            cssClazz,\n            \"text\",\n            false\n        )\n    }\n\n    private fun Edit.processInsertForOldEditor(offset: Long) {\n        val numLines = lengthB - lengthA\n        insertEmptyLinesAt(editor = editorWithOldText, rowNumber = beginB + offset, numLines = numLines)\n        highlighLinesWithGutter(editorWithOldText, beginB + offset, numLines, TextStyles.textInsertedForBalance)\n    }\n\n    private fun Edit.processInsertForNewEditor(offset: Long) {\n        highlighLinesWithGutter(editor = editorWithNewText, fromRow = beginB + offset, numLines = lengthB, cssClazz = TextStyles.insertedTextNew)\n    }\n\n    private fun Edit.processDeleteForNewEditor(offset: Long): Long {\n        val numLinesInDocument = editorWithNewText.getSession().getLength() as Number\n        return if (numLinesInDocument.toLong() - 1 <= endB  )  {\n            /** Handle deletions at end of file */\n            insertEmptyLinesAt(editor = editorWithNewText ,rowNumber = numLinesInDocument.toLong(),  numLines = lengthB + 1)\n            highlighLinesWithGutter(editorWithNewText, numLinesInDocument.toLong(), lengthB + 1, TextStyles.textInsertedForBalance)\n            0L\n        } else {\n            /** We are not at the end of file */\n            insertEmptyLinesAt(editor = editorWithNewText ,rowNumber = beginB + offset,  numLines = lengthA)\n            highlighLinesWithGutter(editorWithNewText, beginB + offset, lengthA, TextStyles.textInsertedForBalance)\n            lengthA\n        }\n    }\n\n    private fun Edit.processDeleteForOldEditor(offset: Long) {\n        /** [Edit.beginA] and [Edit.endA] denote the line numbers of the _old_ text\n         * We must use the line numbers of the new text - denoted by [Edit.beginB] and [Edit.endB] to\n         * highlight the part that was _removed_ from old text\n         */\n        highlighLinesWithGutter(editorWithOldText, beginB + offset, lengthA, TextStyles.removedText)\n    }\n\n    private fun highlighLinesWithGutter(editor: dynamic, fromRow: Long, numLines: Long, cssClazz: String) {\n        highlightLines(editor, fromRow, numLines, cssClazz)\n        highlightGutter(editor, fromRow, numLines, cssClazz)\n    }\n\n    private fun highlightLines(editor: dynamic, fromRow: Long, numLines: Long, cssClazz: String) {\n        editor.getSession().highlightLines(fromRow.toDouble(), ( fromRow + numLines - 1 ) .toDouble(), cssClazz)\n    }\n\n    private fun highlightGutter(editor: dynamic ,fromRow: Long, numLines: Long, cssClazz: String) {\n        (fromRow until (fromRow + numLines)).map { rowNumber ->\n            editor.getSession().addGutterDecoration(rowNumber.toDouble() , cssClazz)\n        }\n    }\n\n    private fun insertEmptyLinesAt(editor: dynamic, rowNumber: Long,numLines: Long) {\n        val emptyLinesArray = generateEmptyLineArray(numLines)\n        editor.getSession().getDocument().insertFullLines(rowNumber, emptyLinesArray)\n    }\n\n    private fun generateEmptyLineArray(numLines: Long) = Array(numLines.toInt()) { \"\" }\n\n}",
      "diffChangeType": "RENAME",
      "fileHeader": {
        "identifier": "30c3eef",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/codereview/processor/TextDiffProcessor.kt",
        "fileOldPath": "kotlin/src/jsMain/kotlin/supercr/processor/TextDiffProcessor.kt",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/processor/TextDiffProcessor.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/processor/TextDiffProcessor.kt\nsimilarity index 99%\nrename from kotlin/src/jsMain/kotlin/supercr/processor/TextDiffProcessor.kt\nrename to kotlin/src/jsMain/kotlin/supercr/workflows/codereview/processor/TextDiffProcessor.kt\nindex 6037945..30c3eef 100644\n--- a/kotlin/src/jsMain/kotlin/supercr/processor/TextDiffProcessor.kt\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/processor/TextDiffProcessor.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 1,
            "endB": 1,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          }
        ]
      }
    },
    {
      "rawTextOld": "package supercr.views\n\nimport Grid\nimport codereview.FileDiff\nimport codereview.FileDiffList\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.setState\n\nexternal interface ChangesetScreenProps: RProps {\n    var fileDiffList: FileDiffList\n}\n\nexternal interface ChangeSetScreenState: RState {\n    var selectedFile: FileDiff?\n}\n\n/**\n * Main Screen to start off reviews with.\n * Should aim to show\n * (a) Summary of the PR\n * (b) Files changed etc\n * (c) Stats\n * (d) Comments\n */\nclass ChangesetScreen : RComponent<ChangesetScreenProps, ChangeSetScreenState>() {\n    override fun RBuilder.render() {\n        Grid {\n            attrs {\n                container = true\n                item = false\n                justify = \"flex-start\"\n                spacing = 1\n            }\n            Grid {\n                attrs {\n                    xs = 3\n                    item = true\n                    container = false\n                }\n                fileList {\n                    fileList = props.fileDiffList\n                    onFileSelect = handleFileSelect\n                }\n            }\n            Grid {\n                attrs {\n                    xs = 9\n                    item = true\n                    container = false\n                }\n                if (state.selectedFile != null) {\n                    fileView {\n                        fileDiff = props.fileDiffList.fileDiffs.find { it == state.selectedFile }!!\n                    }\n                }\n            }\n        }\n    }\n\n    private val handleFileSelect: (FileDiff?) -> Unit = { userSelectedFile ->\n        setState {\n            selectedFile = userSelectedFile\n        }\n    }\n}\n\nfun RBuilder.changeSetScreen(handler: ChangesetScreenProps.() -> Unit): ReactElement {\n    return child(ChangesetScreen::class) {\n        this.attrs(handler)\n    }\n}\n",
      "rawTextNew": "package supercr.workflows.codereview.screens\n\nimport Grid\nimport codereview.FileDiff\nimport codereview.FileDiffList\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.setState\nimport supercr.workflows.codereview.components.fileList\nimport supercr.workflows.codereview.components.fileView\n\nexternal interface ChangesetScreenProps: RProps {\n    var fileDiffList: FileDiffList\n}\n\nexternal interface ChangeSetScreenState: RState {\n    var selectedFile: FileDiff?\n}\n\n/**\n * Main Screen to start off reviews with.\n * Should aim to show\n * (a) Summary of the PR\n * (b) Files changed etc\n * (c) Stats\n * (d) Comments\n */\nclass ChangesetScreen : RComponent<ChangesetScreenProps, ChangeSetScreenState>() {\n    override fun RBuilder.render() {\n        Grid {\n            attrs {\n                container = true\n                item = false\n                justify = \"flex-start\"\n                spacing = 1\n            }\n            Grid {\n                attrs {\n                    xs = 3\n                    item = true\n                    container = false\n                }\n                fileList {\n                    fileList = props.fileDiffList\n                    onFileSelect = handleFileSelect\n                }\n            }\n            Grid {\n                attrs {\n                    xs = 9\n                    item = true\n                    container = false\n                }\n                if (state.selectedFile != null) {\n                    fileView {\n                        fileDiff = props.fileDiffList.fileDiffs.find { it == state.selectedFile }!!\n                    }\n                }\n            }\n        }\n    }\n\n    private val handleFileSelect: (FileDiff?) -> Unit = { userSelectedFile ->\n        setState {\n            selectedFile = userSelectedFile\n        }\n    }\n}\n\nfun RBuilder.changeSetScreen(handler: ChangesetScreenProps.() -> Unit): ReactElement {\n    return child(ChangesetScreen::class) {\n        this.attrs(handler)\n    }\n}\n",
      "diffChangeType": "RENAME",
      "fileHeader": {
        "identifier": "38ca8de",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/codereview/screens/ChangesetScreen.kt",
        "fileOldPath": "kotlin/src/jsMain/kotlin/supercr/views/ChangesetScreen.kt",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/views/ChangesetScreen.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/screens/ChangesetScreen.kt\nsimilarity index 92%\nrename from kotlin/src/jsMain/kotlin/supercr/views/ChangesetScreen.kt\nrename to kotlin/src/jsMain/kotlin/supercr/workflows/codereview/screens/ChangesetScreen.kt\nindex eea7021..38ca8de 100644\n--- a/kotlin/src/jsMain/kotlin/supercr/views/ChangesetScreen.kt\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/codereview/screens/ChangesetScreen.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 1,
            "endB": 1,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          },
          {
            "beginA": 11,
            "beginB": 11,
            "endA": 11,
            "endB": 13,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 2
          }
        ]
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "package supercr.workflows.gettingstarted.components\n\nimport Button\nimport Grid\nimport Paper\nimport kotlinx.html.InputType\nimport org.w3c.dom.HTMLInputElement\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.createRef\nimport react.dom.defaultValue\nimport react.dom.input\nimport react.dom.p\n\ninterface LoginComponentProps: RProps {\n    var onLoginButtonPressed: (String) -> Unit\n}\n\nclass LoginComponent: RComponent<LoginComponentProps, RState>() {\n    private val personalAccessTokenInputRef = createRef<HTMLInputElement>()\n\n    override fun RBuilder.render() {\n        Grid {\n            attrs {\n                item = false\n                container = true\n                alignItems = \"center\"\n                direction = \"row\"\n                justify = \"center\"\n                spacing = 4\n            }\n        }\n        Grid {\n            attrs {\n                item = true\n                container = false\n            }\n            Paper {\n                attrs {\n                    square = true\n                    elevation = 3\n                }\n                Grid {\n                    attrs {\n                        item = false\n                        container = true\n                        alignItems = \"center\"\n                        direction = \"row\"\n                        justify = \"center\"\n                        spacing = 2\n                    }\n                    Grid {\n                        attrs {\n                            item = true\n                            container = false\n                            xs = 12\n                        }\n                        p {\n                            + \"Welcome to the fastest CR experience. Lets Get Started\"\n                        }\n                        input(type = InputType.password) {\n                            ref = personalAccessTokenInputRef\n                            attrs.placeholder = \"Enter your github personal access token\"\n                            attrs.defaultValue = \"4da05160ff8311a45f31fe8fd6ab374b8a6f9fe9\"\n                        }\n                    }\n                    Grid {\n                        attrs {\n                            item = true\n                            container = false\n                            xs = 4\n                        }\n                    }\n                    Grid {\n                        attrs {\n                            item = true\n                            container = false\n                            xs = 4\n                        }\n                        Button {\n                            attrs {\n                                variant = \"contained\"\n                                color = \"primary\"\n                                onClick= {\n                                    props.onLoginButtonPressed(personalAccessTokenInputRef.current!!.value)\n                                }\n                            }\n                            + \"Login\"\n                        }\n                    }\n                    Grid {\n                        attrs {\n                            item = true\n                            container = false\n                            xs = 4\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nfun RBuilder.loginComponent(handler: LoginComponentProps.() -> Unit): ReactElement {\n    return child(LoginComponent::class) {\n        this.attrs(handler)\n    }\n}\n",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "8b5ef18",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/components/LoginComponent.kt",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/components/LoginComponent.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/components/LoginComponent.kt\nnew file mode 100644\nindex 0000000..8b5ef18\n--- /dev/null\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/components/LoginComponent.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 110,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 110
          }
        ]
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "package supercr.workflows.gettingstarted.components\n\nimport ListItem\nimport codereview.Project\nimport codereview.SuperCrClient\nimport git.provider.RepoSummary\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.async\nimport kotlinx.css.Display\nimport kotlinx.css.display\nimport kotlinx.html.js.onChangeFunction\nimport org.w3c.dom.HTMLInputElement\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.createRef\nimport react.dom.p\nimport react.setState\nimport styled.css\nimport styled.styledInput\n\nexternal interface RepoComponentProps: RProps {\n    var superCrClient: SuperCrClient\n    var repoSummary: RepoSummary\n    var onSetupComplete: (Project) -> Boolean\n}\n\nexternal interface RepoComponentState: RState {\n    var isProcessed: Boolean\n}\n\nclass RepoComponent: RComponent<RepoComponentProps, RepoComponentState>() {\n    private val inputFileRef = createRef<HTMLInputElement>()\n\n    private val handleSelection: () -> Unit = {\n//        inputFileRef.current!!.click() TODO See below. Below if condition is just a hack to select the 'right folder'\n        val project = if (props.repoSummary.full_name == \"theboringtech/btcmain\") {\n            Project(localPath = \"/home/yogesh/work/btc\", providerPath = props.repoSummary.full_name, name = props.repoSummary.name)\n        } else {\n            Project(localPath = \"/home/yogesh/work/theboringtech.github.io\", providerPath = props.repoSummary.full_name, name = props.repoSummary.name)\n        }\n        GlobalScope.async(context = Dispatchers.Main) {\n            props.superCrClient.addProject(project)\n                .let { successfullyProcessed ->\n                    setState {\n                        isProcessed = successfullyProcessed\n                    }\n                    if (successfullyProcessed) {\n                        props.onSetupComplete(project)\n                    }\n                }\n        }.invokeOnCompletion { cause: Throwable? ->\n            if (cause != null) {\n                console.error(\"Something bad happened\")\n                console.error(cause)\n            }\n        }\n    }\n\n    override fun RepoComponentState.init() {\n        isProcessed = false\n    }\n\n    override fun RBuilder.render() {\n        ListItem {\n            attrs {\n                button = true\n                alignItems = \"center\"\n                divider = true\n                onClick = handleSelection\n                disabled = state.isProcessed\n            }\n            p {\n                +props.repoSummary.full_name\n            }\n            /** TODO: Make this work once we switch to electron or Kvision. Right now it just sits there - never used */\n            styledInput {\n                css {\n                    display = Display.none\n                }\n                attrs {\n                    ref = inputFileRef\n                }\n                attrs.onChangeFunction = { event ->\n                    console.log(\"Got the value as ${inputFileRef.current?.files}\")\n                }\n            }\n        }\n    }\n\n}\n\ninternal fun RBuilder.repoComponent(handler: RepoComponentProps.() -> Unit): ReactElement {\n    return child(RepoComponent::class) {\n        this.attrs(handler)\n    }\n}\n",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "770aa13",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/components/RepoComponent.kt",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/components/RepoComponent.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/components/RepoComponent.kt\nnew file mode 100644\nindex 0000000..770aa13\n--- /dev/null\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/components/RepoComponent.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 100,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 100
          }
        ]
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "package supercr.workflows.gettingstarted.components\n\nimport Button\nimport MaterialUIList\nimport codereview.Project\nimport codereview.SuperCrClient\nimport git.provider.GithubClient\nimport git.provider.RepoSummary\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.async\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.setState\n\ninterface RepoInitProps: RProps {\n    var githubClient: GithubClient\n    var superCrClient: SuperCrClient\n    var passProjectInfo: (List<Project>) -> Unit\n}\n\ninterface RepoInitState: RState {\n    var repoList: List<RepoSummary>\n    var showNextButton: Boolean\n    var selectedProjects: List<Project>\n}\n\nclass RepoInitComponent: RComponent<RepoInitProps, RepoInitState>() {\n    override fun RepoInitState.init() {\n        repoList = emptyList()\n        showNextButton = false\n        selectedProjects = emptyList()\n    }\n\n    override fun RBuilder.render() {\n        MaterialUIList {\n            state.repoList.map {\n                repoComponent {\n                    repoSummary = it\n                    onSetupComplete = handleProjectSetup\n                    superCrClient = props.superCrClient\n                }\n            }\n        }\n        if (state.showNextButton) {\n            Button {\n                attrs {\n                    variant = \"contained\"\n                    color = \"primary\"\n                    onClick= handleDone\n                }\n                + \"Done\"\n            }\n        }\n    }\n\n    override fun componentDidMount() {\n        fetchRepos()\n    }\n\n    private val handleDone: () -> Unit = {\n        props.passProjectInfo(state.selectedProjects)\n    }\n\n    /**\n     * TODO: Add some validations to check if the repo being selected is correct or no\n     *  ** Selected Path should be a git repo\n     *  ** Selected Path must point to the same origin (getOriginURL().contains(repoName))\n     */\n    private val handleProjectSetup: (Project) -> Boolean = { givenProject ->\n        setState {\n            showNextButton = true\n            selectedProjects += givenProject\n        }\n        true\n    }\n\n    private fun fetchRepos() {\n        GlobalScope.async {\n            props.githubClient.getReposSummary(\"theboringtech\")\n                .let {\n                    setState {\n                        repoList = it\n                    }\n                }\n        }.invokeOnCompletion { throwable ->\n            if (throwable != null) {\n                console.error(\"Something bad happened\")\n                console.error(throwable)\n            }\n        }\n    }\n}\n\nfun RBuilder.repoInit(handler: RepoInitProps.() -> Unit): ReactElement {\n    return child(RepoInitComponent::class) {\n        this.attrs(handler)\n    }\n}\n",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "f67a16a",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/components/RepoInitialiser.kt",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/components/RepoInitialiser.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/components/RepoInitialiser.kt\nnew file mode 100644\nindex 0000000..f67a16a\n--- /dev/null\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/components/RepoInitialiser.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 101,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 101
          }
        ]
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "package supercr.workflows.gettingstarted.screens\n\nimport auth.DumbOauthClient\nimport codereview.Project\nimport codereview.SuperCrClient\nimport git.provider.GithubClient\nimport io.ktor.client.HttpClient\nimport io.ktor.client.features.json.JsonFeature\nimport io.ktor.client.features.json.serializer.KotlinxSerializer\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.setState\nimport supercr.workflows.gettingstarted.components.loginComponent\nimport supercr.workflows.gettingstarted.components.repoInit\n\nexternal interface GettingStartedScreenProps: RProps {\n    var passAccessToken: (String) -> Unit\n    var passProjects: (List<Project>) -> Unit\n    var superCrClient: SuperCrClient\n}\n\nexternal interface GettingStartedScreenState: RState {\n    var isLoggedIn: Boolean\n    var accessToken: String\n    var githubClient: GithubClient\n}\n\n/**\n * For first time users. 2 functionalities\n * (a) Login to specific provider\n * (b) Setup at least 1 [Project] (map provider path to local path)\n */\nclass GetStartedScreen: RComponent<GettingStartedScreenProps, GettingStartedScreenState>() {\n\n    override fun GettingStartedScreenState.init() {\n        isLoggedIn = false\n        accessToken = \"\"\n    }\n\n    override fun RBuilder.render() {\n        if (!state.isLoggedIn) {\n            loginComponent {\n                onLoginButtonPressed = handleLogin\n            }\n        } else {\n            repoInit {\n                githubClient = state.githubClient\n                passProjectInfo = props.passProjects\n                superCrClient = props.superCrClient\n            }\n        }\n    }\n\n    private val handleLogin: (String) -> Unit = { enteredAccessToken ->\n        val newGithubClient = GithubClient(\n            oauthClient = DumbOauthClient(enteredAccessToken),\n            httpClient = HttpClient() {\n                install(JsonFeature) {\n                    serializer = KotlinxSerializer(json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true)))\n                }\n            }\n        )\n        props.passAccessToken(enteredAccessToken)\n        setState {\n            isLoggedIn = true\n            accessToken = enteredAccessToken\n            githubClient = newGithubClient\n        }\n    }\n\n}\n\nfun RBuilder.getStartedScreen(handler: GettingStartedScreenProps.() -> Unit): ReactElement {\n    return child(GetStartedScreen::class) {\n        this.attrs(handler)\n    }\n}\n\n\n\n\n",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "8e8f029",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/screens/GetStartedScreen.kt",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/screens/GetStartedScreen.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/screens/GetStartedScreen.kt\nnew file mode 100644\nindex 0000000..8e8f029\n--- /dev/null\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/gettingstarted/screens/GetStartedScreen.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 86,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 86
          }
        ]
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "package supercr.workflows.overview.components\n\nimport codereview.Project\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.dom.span\n\nexternal interface ProjectComponentProps: RProps {\n    var project: Project\n}\n\nclass ProjectComponent: RComponent<ProjectComponentProps, RState>() {\n    override fun RBuilder.render() {\n        span {\n            + props.project.name\n        }\n    }\n\n}\n\nfun RBuilder.projectComponent(handler: ProjectComponentProps.() -> Unit): ReactElement {\n    return child(ProjectComponent::class) {\n        this.attrs(handler)\n    }\n}\n",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "dd31620",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/ProjectComponent.kt",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/ProjectComponent.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/ProjectComponent.kt\nnew file mode 100644\nindex 0000000..dd31620\n--- /dev/null\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/ProjectComponent.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 28,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 28
          }
        ]
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "package supercr.workflows.overview.components\n\nimport Button\nimport Grid\nimport ListItem\nimport ListSubHeader\nimport MaterialUIList\nimport codereview.Project\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\n\nexternal interface ProjectListProps: RProps {\n    var projects: List<Project>\n}\n\nclass ProjectList: RComponent<ProjectListProps, RState>() {\n    override fun RBuilder.render() {\n        Grid {\n            attrs {\n                container = true\n                item = false\n                spacing = 2\n            }\n            Grid {\n                attrs {\n                    container = false\n                    item = true\n                    xs = 12\n                }\n                renderProjectList()\n            }\n            Grid {\n                attrs {\n                    container = false\n                    item = true\n                    xs = 12\n                }\n                Button {\n                    attrs {\n                        variant = \"contained\"\n                        color = \"primary\"\n                    }\n                    + \"Add More\"\n                }\n            }\n        }\n    }\n\n    private fun RBuilder.renderProjectList(): ReactElement{\n        return MaterialUIList {\n            ListSubHeader {\n                + \"Projects\"\n            }\n            props.projects.mapIndexed { index, currentProject ->\n                ListItem {\n                    attrs {\n                        button = false\n                        divider = true\n                    }\n                    projectComponent {\n                        project = currentProject\n                    }\n                }\n            }\n        }\n    }\n}\n\nfun RBuilder.projectList(handler: ProjectListProps.() -> Unit): ReactElement {\n    return child(ProjectList::class) {\n        this.attrs(handler)\n    }\n}\n\n\n",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "48a5ec0",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/ProjectList.kt",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/ProjectList.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/ProjectList.kt\nnew file mode 100644\nindex 0000000..48a5ec0\n--- /dev/null\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/ProjectList.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 78,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 78
          }
        ]
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "package supercr.workflows.overview.components\n\nimport ListItem\nimport ListSubHeader\nimport MaterialUIList\nimport codereview.Project\nimport git.provider.GithubClient\nimport git.provider.PullRequestSummary\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.async\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport react.setState\n\nexternal interface PullRequestListProps: RProps {\n    var githubClient: GithubClient\n    var projects: List<Project>\n}\n\nexternal interface PullRequestListState: RState {\n    var pullRequests: List<PullRequestSummary>\n}\n\nclass PullRequestList : RComponent<PullRequestListProps, PullRequestListState>() {\n    override fun RBuilder.render() {\n        MaterialUIList {\n            ListSubHeader {\n                + \"Pull Requests\"\n            }\n            state.pullRequests.mapIndexed { index, currentPullRequest ->\n                ListItem {\n                    attrs {\n                        button = true\n                        divider = true\n                    }\n                    + currentPullRequest.title\n                }\n            }\n        }\n    }\n\n    override fun componentDidMount() {\n        // TODO: Instead of iterating over projects, see if you can retrieve the pull requests where a given user is the asignee\n        props.projects.map { project ->\n            GlobalScope.async(context = Dispatchers.Main) {\n                props.githubClient.listPullRequests(project)\n                    .let { retrievedPullRequests ->\n                        /** TODO : Figure out if it's better to update the state in one shot or for each retrieval like this */\n                        setState {\n                            pullRequests += retrievedPullRequests\n                        }\n                    }\n            }.invokeOnCompletion { throwable ->\n                if (throwable != null) {\n                    console.error(\"Something bad happened\")\n                    console.error(throwable)\n                }\n            }\n        }\n    }\n\n    override fun PullRequestListState.init() {\n        pullRequests = emptyList()\n    }\n}\n\nfun RBuilder.pullRequestList(handler: PullRequestListProps.() -> Unit): ReactElement {\n    return child(PullRequestList::class) {\n        this.attrs(handler)\n    }\n}",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "62edbd8",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/PullRequestList.kt",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/PullRequestList.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/PullRequestList.kt\nnew file mode 100644\nindex 0000000..62edbd8\n--- /dev/null\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/PullRequestList.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 75,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 75
          }
        ]
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "package supercr.workflows.overview.components\n\nimport Paper\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\n\nexternal interface UserStatsProps : RProps {\n}\n\nexternal interface UserStatsState : RState {\n\n}\n\nclass UserStats : RComponent<UserStatsProps, UserStatsState>() {\n    override fun RBuilder.render() {\n        Paper {\n            + \"Stats Not implemented yet\"\n        }\n    }\n}\n\nfun RBuilder.userStats(handler: UserStatsProps.() -> Unit): ReactElement {\n    return child(UserStats::class) {\n        this.attrs(handler)\n    }\n}",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "968d592",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/UserStats.kt",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/UserStats.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/UserStats.kt\nnew file mode 100644\nindex 0000000..968d592\n--- /dev/null\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/overview/components/UserStats.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 29,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 29
          }
        ]
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "e69de29",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/overview/placeholder",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/workflows/overview/placeholder b/kotlin/src/jsMain/kotlin/supercr/workflows/overview/placeholder\nnew file mode 100644\nindex 0000000..e69de29\n--- /dev/null\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/overview/placeholder\n",
        "editList": []
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "package supercr.workflows.overview.screens\n\nimport Grid\nimport codereview.Project\nimport git.provider.GithubClient\nimport react.RBuilder\nimport react.RComponent\nimport react.RProps\nimport react.RState\nimport react.ReactElement\nimport supercr.workflows.overview.components.projectList\nimport supercr.workflows.overview.components.pullRequestList\nimport supercr.workflows.overview.components.userStats\n\nexternal interface OverviewScreenProps: RProps {\n    var projects : List<Project>\n    var getGithubClient: () -> GithubClient\n}\n\nexternal interface OverviewScreenState: RState {\n}\n\nclass OverviewScreen : RComponent<OverviewScreenProps, OverviewScreenState>() {\n    override fun RBuilder.render() {\n        Grid {\n            attrs {\n                container = true\n                item = false\n                justify = \"space-evenly\"\n                alignItems = \"center\"\n                direction = \"row\"\n                spacing = 1\n            }\n            Grid {\n                attrs {\n                    container = false\n                    item = true\n                    xs = 8\n                }\n                pullRequestList {\n                    githubClient = props.getGithubClient()\n                    projects = props.projects\n                }\n            }\n            Grid {\n                attrs {\n                    container = false\n                    item = true\n                    xs = 4\n                }\n                renderRightSection()\n            }\n        }\n    }\n\n    override fun OverviewScreenState.init() {\n    }\n\n    private fun RBuilder.renderRightSection(): ReactElement {\n        return Grid {\n            attrs {\n                container = true\n                item = false\n                alignItems = \"stretch\"\n            }\n            Grid {\n                attrs {\n                    item = true\n                    container = false\n                    xs = 12\n                }\n                userStats {\n\n                }\n            }\n            Grid {\n                attrs {\n                    item = true\n                    container = false\n                    xs = 12\n                }\n                projectList {\n                    projects = props.projects\n                }\n            }\n        }\n    }\n}\n\nfun RBuilder.overviewScreen(handler: OverviewScreenProps.() -> Unit): ReactElement {\n    return child(OverviewScreen::class) {\n        this.attrs(handler)\n    }\n}\n",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "5b19853",
        "fileNewPath": "kotlin/src/jsMain/kotlin/supercr/workflows/overview/screens/OverviewScreen.kt",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/jsMain/kotlin/supercr/workflows/overview/screens/OverviewScreen.kt b/kotlin/src/jsMain/kotlin/supercr/workflows/overview/screens/OverviewScreen.kt\nnew file mode 100644\nindex 0000000..5b19853\n--- /dev/null\n+++ b/kotlin/src/jsMain/kotlin/supercr/workflows/overview/screens/OverviewScreen.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 94,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 94
          }
        ]
      }
    },
    {
      "rawTextOld": "package git.provider\n\nimport auth.DumbOauthClient\nimport io.ktor.client.HttpClient\nimport io.ktor.client.features.json.JsonFeature\nimport io.ktor.client.features.json.serializer.KotlinxSerializer\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.promise\nimport kotlinx.coroutines.withTimeout\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport runTest\nimport kotlin.js.Date\nimport kotlin.test.Ignore\nimport kotlin.test.Test\nimport kotlin.test.assertEquals\nimport kotlin.test.assertFalse\nimport kotlin.test.assertTrue\nimport kotlin.time.measureTime\n\nclass GithubClientTest {\n    val githubClient = GithubClient(\n        oauthClient = DumbOauthClient(\"\"),\n        httpClient = HttpClient() {\n            install(JsonFeature) {\n                serializer = KotlinxSerializer(json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true)))\n            }\n        }\n    )\n\n    /**\n     * This will be re-written as part of a more elaborate e2e test\n     */\n    @Test\n    @Ignore\n    fun tempTestForGithubClient() = runTest {\n        try {\n            val reposSummary = githubClient.getReposSummary(\"theboringtech\")\n            assertEquals(2, reposSummary.size)\n            val websiteRepo = reposSummary.first { it.name.contains(\"github.io\") }\n            val pullRequests = githubClient.listPullRequests(websiteRepo)\n            val prMerged = githubClient.isPrMerged(pullRequests.first())\n            assertFalse(prMerged)\n            val pulLRequestDetails = githubClient.getPullRequestDetails(pullRequests.first())\n            assertTrue(pulLRequestDetails.mergeable)\n        } catch (e: Exception) {\n            if (e.message?.contains(\"401 Unauthorized\") == true) {\n                println(\"The test by default doesn't have an access token. Add an access token while creating github client\")\n                throw RuntimeException(\"Check access token on github client\")\n            }\n            throw RuntimeException(e)\n        }\n    }\n\n}",
      "rawTextNew": "package git.provider\n\nimport auth.DumbOauthClient\nimport codereview.Project\nimport io.ktor.client.HttpClient\nimport io.ktor.client.features.json.JsonFeature\nimport io.ktor.client.features.json.serializer.KotlinxSerializer\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport runTest\nimport kotlin.test.Ignore\nimport kotlin.test.Test\nimport kotlin.test.assertEquals\nimport kotlin.test.assertFalse\nimport kotlin.test.assertTrue\n\n\nclass GithubClientTest {\n    val githubClient = GithubClient(\n        oauthClient = DumbOauthClient(\"4da05160ff8311a45f31fe8fd6ab374b8a6f9fe9\"),\n        httpClient = HttpClient() {\n            install(JsonFeature) {\n                serializer = KotlinxSerializer(json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true)))\n            }\n        }\n    )\n\n    /**\n     * This will be re-written as part of a more elaborate e2e test\n     * Note: We have a lot of println statements to help zero in on exact call where the error occurs\n     */\n    @Test\n    @Ignore\n    fun tempTestForGithubClient() = runTest {\n        try {\n            val reposSummary = githubClient.getReposSummary(\"theboringtech\")\n            assertEquals(2, reposSummary.size)\n            val websiteRepo = reposSummary.first { it.name.contains(\"github.io\") }\n            val project = Project(\"/home/yogesh/work/theboringtech.github.io\", websiteRepo.full_name, websiteRepo.name)\n            println(\"Will Fetch pull request for $project\")\n            val pullRequests = githubClient.listPullRequests(project)\n            println(\"Pull requests fetched. Now, will check if pr is merged\")\n            val prMerged = githubClient.isPrMerged(pullRequests.first())\n            println(\"Retrieved prMergedValue\")\n            assertFalse(prMerged)\n            println(\"Will now fetch pull request details\")\n            val pulLRequestDetails = githubClient.getPullRequestDetails(pullRequests.first())\n            assertTrue(pulLRequestDetails.mergeable)\n        } catch (e: Exception) {\n            if (e.message?.contains(\"401 Unauthorized\") == true) {\n                println(\"The test by default doesn't have an access token. Add an access token while creating github client\")\n                throw RuntimeException(\"Check access token on github client\")\n            }\n            throw e\n        }\n    }\n\n}",
      "diffChangeType": "MODIFY",
      "fileHeader": {
        "identifier": "444d02d",
        "fileNewPath": "kotlin/src/jsTest/kotlin/git/provider/GithubClientTest.kt",
        "fileOldPath": "kotlin/src/jsTest/kotlin/git/provider/GithubClientTest.kt",
        "description": "diff --git a/kotlin/src/jsTest/kotlin/git/provider/GithubClientTest.kt b/kotlin/src/jsTest/kotlin/git/provider/GithubClientTest.kt\nindex 9ea8cee..444d02d 100644\n--- a/kotlin/src/jsTest/kotlin/git/provider/GithubClientTest.kt\n+++ b/kotlin/src/jsTest/kotlin/git/provider/GithubClientTest.kt\n",
        "editList": [
          {
            "beginA": 3,
            "beginB": 3,
            "endA": 3,
            "endB": 4,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 1
          },
          {
            "beginA": 6,
            "beginB": 7,
            "endA": 10,
            "endB": 7,
            "editType": "DELETE",
            "isEmpty": false,
            "lengthA": 4,
            "lengthB": 0
          },
          {
            "beginA": 13,
            "beginB": 10,
            "endA": 14,
            "endB": 10,
            "editType": "DELETE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 0
          },
          {
            "beginA": 19,
            "beginB": 15,
            "endA": 20,
            "endB": 16,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          },
          {
            "beginA": 23,
            "beginB": 19,
            "endA": 24,
            "endB": 20,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          },
          {
            "beginA": 33,
            "beginB": 29,
            "endA": 33,
            "endB": 30,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 1
          },
          {
            "beginA": 41,
            "beginB": 38,
            "endA": 42,
            "endB": 42,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 4
          },
          {
            "beginA": 43,
            "beginB": 43,
            "endA": 43,
            "endB": 44,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 1
          },
          {
            "beginA": 44,
            "beginB": 45,
            "endA": 44,
            "endB": 46,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 1
          },
          {
            "beginA": 51,
            "beginB": 53,
            "endA": 52,
            "endB": 54,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          }
        ]
      }
    },
    {
      "rawTextOld": "package git.provider\n\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport kotlin.test.Test\nimport kotlin.test.assertEquals\n\n/**\n * This weird import path is needed because `pull_request_example1.json` which is initially placed in\n * jsTest/resources/  directory is 'transferred to' 'build/js/processedResources/js/test folder\n * TODO: There must be a way to instruct gradle to put these files along with js test files before running the test. Figure that out\n */\n@JsModule(\"../../../../processedResources/js/test/pull_request_example1.json\")\nexternal val pullRequestExample1Contents: dynamic\n\n@JsModule(\"../../../../processedResources/js/test/pull_request_details.json\")\nexternal val pullRequestDetailsContents: dynamic\n\n@JsModule(\"../../../../processedResources/js/test/pull_request_commitlist_entry.json\")\nexternal val pullRequestCommitListEntry: dynamic\n\n@JsModule(\"../../../../processedResources/js/test/pull_request_filelist_entry.json\")\nexternal val pullRequestFileListEntry: dynamic\n/**\n * Test Deserialisation / Serialisation of Github DTOs\n */\nclass GithubDtosTest {\n\n    @Test\n    fun shouldDeserialisePullRequestString() {\n        val json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true))\n        val pullRequestSummary: PullRequestSummary = json.parse(PullRequestSummary.serializer(), JSON.stringify(pullRequestExample1Contents))\n        assertEquals(\"Proposed changes to the website\", pullRequestSummary.title)\n        assertEquals(1, pullRequestSummary.assignees.size)\n    }\n\n    @Test\n    fun shouldDeserialisePullRequestDetailsString() {\n        val json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true))\n        val pullRequestDetails: PullRequestDetails = json.parse(PullRequestDetails.serializer(), JSON.stringify(pullRequestDetailsContents))\n        assertEquals(\"Amazing new feature\", pullRequestDetails.title)\n        assertEquals(2, pullRequestDetails.assignees.size)\n    }\n\n    @Test\n    fun shouldDeserialisePullRequestCommitListString() {\n        val json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true))\n        val pullRequestCommit = json.parse(GithubCommit.serializer(), JSON.stringify(pullRequestCommitListEntry))\n        assertEquals(\"Fix all the bugs\", pullRequestCommit.commit.message)\n        assertEquals(1, pullRequestCommit.parents.size)\n    }\n\n    @Test\n    fun shouldDeserialisePullRequestFileListString() {\n        val json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true))\n        val pullRequestFileDetails = json.parse(PullRequestFileDetails.serializer(), JSON.stringify(pullRequestFileListEntry))\n        assertEquals(\"file1.txt\", pullRequestFileDetails.filename)\n        assertEquals(124L, pullRequestFileDetails.changes)\n    }\n}",
      "rawTextNew": "package git.provider\n\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport kotlin.test.Test\nimport kotlin.test.assertEquals\n\n/**\n * This weird import path is needed because `pull_request_example1.json` which is initially placed in\n * jsTest/resources/  directory is 'transferred to' 'build/js/processedResources/js/test folder\n * TODO: There must be a way to instruct gradle to put these files along with js test files before running the test. Figure that out\n */\n@JsModule(\"../../../../processedResources/js/test/pull_request_example1.json\")\nexternal val pullRequestExample1Contents: dynamic\n\n@JsModule(\"../../../../processedResources/js/test/pull_request_example2.json\")\nexternal val pullRequestExample2WithoutAssigneeContents: dynamic\n\n@JsModule(\"../../../../processedResources/js/test/pull_request_details.json\")\nexternal val pullRequestDetailsContents: dynamic\n\n@JsModule(\"../../../../processedResources/js/test/pull_request_commitlist_entry.json\")\nexternal val pullRequestCommitListEntry: dynamic\n\n@JsModule(\"../../../../processedResources/js/test/pull_request_filelist_entry.json\")\nexternal val pullRequestFileListEntry: dynamic\n/**\n * Test Deserialisation / Serialisation of Github DTOs\n */\nclass GithubDtosTest {\n\n    @Test\n    fun shouldDeserialisePullRequestString() {\n        val json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true))\n        val pullRequestSummary: PullRequestSummary = json.parse(PullRequestSummary.serializer(), JSON.stringify(pullRequestExample1Contents))\n        assertEquals(\"Proposed changes to the website\", pullRequestSummary.title)\n        assertEquals(1, pullRequestSummary.assignees.size)\n\n        val pullRequestWithoutAssigneeSummary: PullRequestSummary = json.parse(\n            deserializer = PullRequestSummary.serializer(),\n            string = JSON.stringify(pullRequestExample2WithoutAssigneeContents)\n        )\n        assertEquals(\"Making changes to the test file\", pullRequestWithoutAssigneeSummary.title)\n        assertEquals(0, pullRequestWithoutAssigneeSummary.assignees.size)\n    }\n\n    @Test\n    fun shouldDeserialisePullRequestDetailsString() {\n        val json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true))\n        val pullRequestDetails: PullRequestDetails = json.parse(PullRequestDetails.serializer(), JSON.stringify(pullRequestDetailsContents))\n        assertEquals(\"Amazing new feature\", pullRequestDetails.title)\n        assertEquals(2, pullRequestDetails.assignees.size)\n    }\n\n    @Test\n    fun shouldDeserialisePullRequestCommitListString() {\n        val json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true))\n        val pullRequestCommit = json.parse(GithubCommit.serializer(), JSON.stringify(pullRequestCommitListEntry))\n        assertEquals(\"Fix all the bugs\", pullRequestCommit.commit.message)\n        assertEquals(1, pullRequestCommit.parents.size)\n    }\n\n    @Test\n    fun shouldDeserialisePullRequestFileListString() {\n        val json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true))\n        val pullRequestFileDetails = json.parse(PullRequestFileDetails.serializer(), JSON.stringify(pullRequestFileListEntry))\n        assertEquals(\"file1.txt\", pullRequestFileDetails.filename)\n        assertEquals(124L, pullRequestFileDetails.changes)\n    }\n}",
      "diffChangeType": "MODIFY",
      "fileHeader": {
        "identifier": "6752d07",
        "fileNewPath": "kotlin/src/jsTest/kotlin/git/provider/GithubDtosTest.kt",
        "fileOldPath": "kotlin/src/jsTest/kotlin/git/provider/GithubDtosTest.kt",
        "description": "diff --git a/kotlin/src/jsTest/kotlin/git/provider/GithubDtosTest.kt b/kotlin/src/jsTest/kotlin/git/provider/GithubDtosTest.kt\nindex 6fe36cf..6752d07 100644\n--- a/kotlin/src/jsTest/kotlin/git/provider/GithubDtosTest.kt\n+++ b/kotlin/src/jsTest/kotlin/git/provider/GithubDtosTest.kt\n",
        "editList": [
          {
            "beginA": 15,
            "beginB": 15,
            "endA": 15,
            "endB": 18,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 3
          },
          {
            "beginA": 34,
            "beginB": 37,
            "endA": 34,
            "endB": 44,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 7
          }
        ]
      }
    },
    {
      "rawTextOld": "package supercr.processor\n\nimport kotlin.test.Test\nimport kotlin.test.assertEquals\n\nclass LineDiffProcessorTest {\n    @Test\n    fun testNewWordAddedToNewLine() {\n        val oldLine = \"System.out.println('This is 2nd line');\"\n        val newLine = \"System.out.println('This is 2nd changed line');\"\n        val (expectedMarkersForOldText, expectedMarkersForNewText) = Pair<List<VimDiffRowMarker>, List<VimDiffRowMarker>>(\n            emptyList(),\n            listOf(\n                VimDiffRowMarker(fromColumn = 32, toColumn = 39, highlightType = HighlightType.TextAdded)\n            )\n        )\n        LineDiffProcessor.getDiffMarkers(oldLine, newLine)\n            .let { (markersForOldText, markersForNewText) ->\n                expectedMarkersForNewText.verify(markersForNewText)\n                expectedMarkersForOldText.verify(markersForOldText)\n            }\n    }\n\n    @Test\n    fun testWordRemovedFromNewLine() {\n        val oldLine = \"System.out.println('This is 2nd line');\"\n        val newLine = \"System.out.println('2nd line');\"\n        val expectedMarkersForNewText = emptyList<VimDiffRowMarker>()\n        val expectedMarkersForOldText = listOf(\n            VimDiffRowMarker(fromColumn = 20, toColumn = 27, highlightType = HighlightType.TextRemoved)\n        )\n        LineDiffProcessor.getDiffMarkers(oldLine, newLine)\n            .let { (markersForOldText, markersForNewText) ->\n                expectedMarkersForNewText.verify(markersForNewText)\n                expectedMarkersForOldText.verify(markersForOldText)\n            }\n    }\n\n    @Test\n    fun testWordRemovedAndAddedToNewLine() {\n        val oldLine = \"System.out.println('This is 2nd line');\"\n        val newLine = \"System.out.println('2nd line is that');\"\n        val expectedMarkersForNewText = listOf(\n            VimDiffRowMarker(fromColumn = 20, toColumn = 22, highlightType = HighlightType.TextAdded),\n            VimDiffRowMarker(fromColumn = 24, toColumn = 28, highlightType = HighlightType.TextAdded),\n            VimDiffRowMarker(fromColumn = 32, toColumn = 35, highlightType = HighlightType.TextAdded)\n        )\n        val expectedMarkersForOldText = listOf(\n            VimDiffRowMarker(fromColumn = 20, toColumn = 23, highlightType = HighlightType.TextRemoved),\n            VimDiffRowMarker(fromColumn = 28, toColumn = 35, highlightType = HighlightType.TextRemoved)\n        )\n        LineDiffProcessor.getDiffMarkers(oldLine, newLine)\n            .let { (markersForOldText, markersForNewText) ->\n                expectedMarkersForNewText.verify(markersForNewText)\n                expectedMarkersForOldText.verify(markersForOldText)\n            }\n\n    }\n\n    private fun List<VimDiffRowMarker>.verify(actual: List<VimDiffRowMarker>) {\n        assertEquals(this.size, actual.size)\n        this.forEachIndexed { index, expectedMarker ->\n            assertEquals(expectedMarker, actual[index], \"Expected $expectedMarker at index $index but got ${ actual[index] }\")\n        }\n    }\n}\n",
      "rawTextNew": "package supercr.workflows.codereview.processor\n\nimport kotlin.test.Test\nimport kotlin.test.assertEquals\n\nclass LineDiffProcessorTest {\n    @Test\n    fun testNewWordAddedToNewLine() {\n        val oldLine = \"System.out.println('This is 2nd line');\"\n        val newLine = \"System.out.println('This is 2nd changed line');\"\n        val (expectedMarkersForOldText, expectedMarkersForNewText) = Pair<List<VimDiffRowMarker>, List<VimDiffRowMarker>>(\n            emptyList(),\n            listOf(\n                VimDiffRowMarker(fromColumn = 32, toColumn = 39, highlightType = HighlightType.TextAdded)\n            )\n        )\n        LineDiffProcessor.getDiffMarkers(oldLine, newLine)\n            .let { (markersForOldText, markersForNewText) ->\n                expectedMarkersForNewText.verify(markersForNewText)\n                expectedMarkersForOldText.verify(markersForOldText)\n            }\n    }\n\n    @Test\n    fun testWordRemovedFromNewLine() {\n        val oldLine = \"System.out.println('This is 2nd line');\"\n        val newLine = \"System.out.println('2nd line');\"\n        val expectedMarkersForNewText = emptyList<VimDiffRowMarker>()\n        val expectedMarkersForOldText = listOf(\n            VimDiffRowMarker(fromColumn = 20, toColumn = 27, highlightType = HighlightType.TextRemoved)\n        )\n        LineDiffProcessor.getDiffMarkers(oldLine, newLine)\n            .let { (markersForOldText, markersForNewText) ->\n                expectedMarkersForNewText.verify(markersForNewText)\n                expectedMarkersForOldText.verify(markersForOldText)\n            }\n    }\n\n    @Test\n    fun testWordRemovedAndAddedToNewLine() {\n        val oldLine = \"System.out.println('This is 2nd line');\"\n        val newLine = \"System.out.println('2nd line is that');\"\n        val expectedMarkersForNewText = listOf(\n            VimDiffRowMarker(fromColumn = 20, toColumn = 22, highlightType = HighlightType.TextAdded),\n            VimDiffRowMarker(fromColumn = 24, toColumn = 28, highlightType = HighlightType.TextAdded),\n            VimDiffRowMarker(fromColumn = 32, toColumn = 35, highlightType = HighlightType.TextAdded)\n        )\n        val expectedMarkersForOldText = listOf(\n            VimDiffRowMarker(fromColumn = 20, toColumn = 23, highlightType = HighlightType.TextRemoved),\n            VimDiffRowMarker(fromColumn = 28, toColumn = 35, highlightType = HighlightType.TextRemoved)\n        )\n        LineDiffProcessor.getDiffMarkers(oldLine, newLine)\n            .let { (markersForOldText, markersForNewText) ->\n                expectedMarkersForNewText.verify(markersForNewText)\n                expectedMarkersForOldText.verify(markersForOldText)\n            }\n\n    }\n\n    private fun List<VimDiffRowMarker>.verify(actual: List<VimDiffRowMarker>) {\n        assertEquals(this.size, actual.size)\n        this.forEachIndexed { index, expectedMarker ->\n            assertEquals(expectedMarker, actual[index], \"Expected $expectedMarker at index $index but got ${ actual[index] }\")\n        }\n    }\n}\n",
      "diffChangeType": "RENAME",
      "fileHeader": {
        "identifier": "54e8d24",
        "fileNewPath": "kotlin/src/jsTest/kotlin/supercr/workflows/codereview/processor/LineDiffProcessorTest.kt",
        "fileOldPath": "kotlin/src/jsTest/kotlin/supercr/processor/LineDiffProcessorTest.kt",
        "description": "diff --git a/kotlin/src/jsTest/kotlin/supercr/processor/LineDiffProcessorTest.kt b/kotlin/src/jsTest/kotlin/supercr/workflows/codereview/processor/LineDiffProcessorTest.kt\nsimilarity index 98%\nrename from kotlin/src/jsTest/kotlin/supercr/processor/LineDiffProcessorTest.kt\nrename to kotlin/src/jsTest/kotlin/supercr/workflows/codereview/processor/LineDiffProcessorTest.kt\nindex b4d2783..54e8d24 100644\n--- a/kotlin/src/jsTest/kotlin/supercr/processor/LineDiffProcessorTest.kt\n+++ b/kotlin/src/jsTest/kotlin/supercr/workflows/codereview/processor/LineDiffProcessorTest.kt\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 1,
            "endB": 1,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          }
        ]
      }
    },
    {
      "rawTextOld": null,
      "rawTextNew": "{\n  \"url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/pulls/2\",\n  \"id\": 421222538,\n  \"node_id\": \"MDExOlB1bGxSZXF1ZXN0NDIxMjIyNTM4\",\n  \"html_url\": \"https://github.com/theboringtech/theboringtech.github.io/pull/2\",\n  \"diff_url\": \"https://github.com/theboringtech/theboringtech.github.io/pull/2.diff\",\n  \"patch_url\": \"https://github.com/theboringtech/theboringtech.github.io/pull/2.patch\",\n  \"issue_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/issues/2\",\n  \"number\": 2,\n  \"state\": \"open\",\n  \"locked\": false,\n  \"title\": \"Making changes to the test file\",\n  \"user\": {\n    \"login\": \"yogeshnachnani\",\n    \"id\": 2109181,\n    \"node_id\": \"MDQ6VXNlcjIxMDkxODE=\",\n    \"avatar_url\": \"https://avatars2.githubusercontent.com/u/2109181?v=4\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/yogeshnachnani\",\n    \"html_url\": \"https://github.com/yogeshnachnani\",\n    \"followers_url\": \"https://api.github.com/users/yogeshnachnani/followers\",\n    \"following_url\": \"https://api.github.com/users/yogeshnachnani/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/yogeshnachnani/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/yogeshnachnani/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/yogeshnachnani/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/yogeshnachnani/orgs\",\n    \"repos_url\": \"https://api.github.com/users/yogeshnachnani/repos\",\n    \"events_url\": \"https://api.github.com/users/yogeshnachnani/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/yogeshnachnani/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"body\": \"\",\n  \"created_at\": \"2020-05-21T08:29:16Z\",\n  \"updated_at\": \"2020-05-21T10:06:17Z\",\n  \"closed_at\": null,\n  \"merged_at\": null,\n  \"merge_commit_sha\": \"f99c4f7d46c31798e736d6b564f7527d9b573096\",\n  \"assignee\": null,\n  \"assignees\": [\n\n  ],\n  \"requested_reviewers\": [\n\n  ],\n  \"requested_teams\": [\n\n  ],\n  \"labels\": [\n\n  ],\n  \"milestone\": null,\n  \"draft\": false,\n  \"commits_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/pulls/2/commits\",\n  \"review_comments_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/pulls/2/comments\",\n  \"review_comment_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/pulls/comments{/number}\",\n  \"comments_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/issues/2/comments\",\n  \"statuses_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/statuses/c5549e620254c3b0a56b3a8b37dea197ba0e9236\",\n  \"head\": {\n    \"label\": \"theboringtech:foobarbaaz_changed\",\n    \"ref\": \"foobarbaaz_changed\",\n    \"sha\": \"c5549e620254c3b0a56b3a8b37dea197ba0e9236\",\n    \"user\": {\n      \"login\": \"theboringtech\",\n      \"id\": 64058207,\n      \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjY0MDU4MjA3\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/64058207?v=4\",\n      \"gravatar_id\": \"\",\n      \"url\": \"https://api.github.com/users/theboringtech\",\n      \"html_url\": \"https://github.com/theboringtech\",\n      \"followers_url\": \"https://api.github.com/users/theboringtech/followers\",\n      \"following_url\": \"https://api.github.com/users/theboringtech/following{/other_user}\",\n      \"gists_url\": \"https://api.github.com/users/theboringtech/gists{/gist_id}\",\n      \"starred_url\": \"https://api.github.com/users/theboringtech/starred{/owner}{/repo}\",\n      \"subscriptions_url\": \"https://api.github.com/users/theboringtech/subscriptions\",\n      \"organizations_url\": \"https://api.github.com/users/theboringtech/orgs\",\n      \"repos_url\": \"https://api.github.com/users/theboringtech/repos\",\n      \"events_url\": \"https://api.github.com/users/theboringtech/events{/privacy}\",\n      \"received_events_url\": \"https://api.github.com/users/theboringtech/received_events\",\n      \"type\": \"Organization\",\n      \"site_admin\": false\n    },\n    \"repo\": {\n      \"id\": 257480179,\n      \"node_id\": \"MDEwOlJlcG9zaXRvcnkyNTc0ODAxNzk=\",\n      \"name\": \"theboringtech.github.io\",\n      \"full_name\": \"theboringtech/theboringtech.github.io\",\n      \"private\": true,\n      \"owner\": {\n        \"login\": \"theboringtech\",\n        \"id\": 64058207,\n        \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjY0MDU4MjA3\",\n        \"avatar_url\": \"https://avatars1.githubusercontent.com/u/64058207?v=4\",\n        \"gravatar_id\": \"\",\n        \"url\": \"https://api.github.com/users/theboringtech\",\n        \"html_url\": \"https://github.com/theboringtech\",\n        \"followers_url\": \"https://api.github.com/users/theboringtech/followers\",\n        \"following_url\": \"https://api.github.com/users/theboringtech/following{/other_user}\",\n        \"gists_url\": \"https://api.github.com/users/theboringtech/gists{/gist_id}\",\n        \"starred_url\": \"https://api.github.com/users/theboringtech/starred{/owner}{/repo}\",\n        \"subscriptions_url\": \"https://api.github.com/users/theboringtech/subscriptions\",\n        \"organizations_url\": \"https://api.github.com/users/theboringtech/orgs\",\n        \"repos_url\": \"https://api.github.com/users/theboringtech/repos\",\n        \"events_url\": \"https://api.github.com/users/theboringtech/events{/privacy}\",\n        \"received_events_url\": \"https://api.github.com/users/theboringtech/received_events\",\n        \"type\": \"Organization\",\n        \"site_admin\": false\n      },\n      \"html_url\": \"https://github.com/theboringtech/theboringtech.github.io\",\n      \"description\": \"The boring website\",\n      \"fork\": false,\n      \"url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io\",\n      \"forks_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/forks\",\n      \"keys_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/keys{/key_id}\",\n      \"collaborators_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/collaborators{/collaborator}\",\n      \"teams_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/teams\",\n      \"hooks_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/hooks\",\n      \"issue_events_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/issues/events{/number}\",\n      \"events_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/events\",\n      \"assignees_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/assignees{/user}\",\n      \"branches_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/branches{/branch}\",\n      \"tags_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/tags\",\n      \"blobs_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/git/blobs{/sha}\",\n      \"git_tags_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/git/tags{/sha}\",\n      \"git_refs_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/git/refs{/sha}\",\n      \"trees_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/git/trees{/sha}\",\n      \"statuses_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/statuses/{sha}\",\n      \"languages_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/languages\",\n      \"stargazers_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/stargazers\",\n      \"contributors_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/contributors\",\n      \"subscribers_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/subscribers\",\n      \"subscription_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/subscription\",\n      \"commits_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/commits{/sha}\",\n      \"git_commits_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/git/commits{/sha}\",\n      \"comments_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/comments{/number}\",\n      \"issue_comment_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/issues/comments{/number}\",\n      \"contents_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/contents/{+path}\",\n      \"compare_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/compare/{base}...{head}\",\n      \"merges_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/merges\",\n      \"archive_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/{archive_format}{/ref}\",\n      \"downloads_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/downloads\",\n      \"issues_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/issues{/number}\",\n      \"pulls_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/pulls{/number}\",\n      \"milestones_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/milestones{/number}\",\n      \"notifications_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/notifications{?since,all,participating}\",\n      \"labels_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/labels{/name}\",\n      \"releases_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/releases{/id}\",\n      \"deployments_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/deployments\",\n      \"created_at\": \"2020-04-21T04:31:37Z\",\n      \"updated_at\": \"2020-06-01T13:54:53Z\",\n      \"pushed_at\": \"2020-06-01T13:54:50Z\",\n      \"git_url\": \"git://github.com/theboringtech/theboringtech.github.io.git\",\n      \"ssh_url\": \"git@github.com:theboringtech/theboringtech.github.io.git\",\n      \"clone_url\": \"https://github.com/theboringtech/theboringtech.github.io.git\",\n      \"svn_url\": \"https://github.com/theboringtech/theboringtech.github.io\",\n      \"homepage\": null,\n      \"size\": 306,\n      \"stargazers_count\": 0,\n      \"watchers_count\": 0,\n      \"language\": \"HTML\",\n      \"has_issues\": true,\n      \"has_projects\": true,\n      \"has_downloads\": true,\n      \"has_wiki\": true,\n      \"has_pages\": true,\n      \"forks_count\": 0,\n      \"mirror_url\": null,\n      \"archived\": false,\n      \"disabled\": false,\n      \"open_issues_count\": 2,\n      \"license\": null,\n      \"forks\": 0,\n      \"open_issues\": 2,\n      \"watchers\": 0,\n      \"default_branch\": \"master\"\n    }\n  },\n  \"base\": {\n    \"label\": \"theboringtech:foobarbaaz\",\n    \"ref\": \"foobarbaaz\",\n    \"sha\": \"168242420aa58e2c65921adca573df703e01292f\",\n    \"user\": {\n      \"login\": \"theboringtech\",\n      \"id\": 64058207,\n      \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjY0MDU4MjA3\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/64058207?v=4\",\n      \"gravatar_id\": \"\",\n      \"url\": \"https://api.github.com/users/theboringtech\",\n      \"html_url\": \"https://github.com/theboringtech\",\n      \"followers_url\": \"https://api.github.com/users/theboringtech/followers\",\n      \"following_url\": \"https://api.github.com/users/theboringtech/following{/other_user}\",\n      \"gists_url\": \"https://api.github.com/users/theboringtech/gists{/gist_id}\",\n      \"starred_url\": \"https://api.github.com/users/theboringtech/starred{/owner}{/repo}\",\n      \"subscriptions_url\": \"https://api.github.com/users/theboringtech/subscriptions\",\n      \"organizations_url\": \"https://api.github.com/users/theboringtech/orgs\",\n      \"repos_url\": \"https://api.github.com/users/theboringtech/repos\",\n      \"events_url\": \"https://api.github.com/users/theboringtech/events{/privacy}\",\n      \"received_events_url\": \"https://api.github.com/users/theboringtech/received_events\",\n      \"type\": \"Organization\",\n      \"site_admin\": false\n    },\n    \"repo\": {\n      \"id\": 257480179,\n      \"node_id\": \"MDEwOlJlcG9zaXRvcnkyNTc0ODAxNzk=\",\n      \"name\": \"theboringtech.github.io\",\n      \"full_name\": \"theboringtech/theboringtech.github.io\",\n      \"private\": true,\n      \"owner\": {\n        \"login\": \"theboringtech\",\n        \"id\": 64058207,\n        \"node_id\": \"MDEyOk9yZ2FuaXphdGlvbjY0MDU4MjA3\",\n        \"avatar_url\": \"https://avatars1.githubusercontent.com/u/64058207?v=4\",\n        \"gravatar_id\": \"\",\n        \"url\": \"https://api.github.com/users/theboringtech\",\n        \"html_url\": \"https://github.com/theboringtech\",\n        \"followers_url\": \"https://api.github.com/users/theboringtech/followers\",\n        \"following_url\": \"https://api.github.com/users/theboringtech/following{/other_user}\",\n        \"gists_url\": \"https://api.github.com/users/theboringtech/gists{/gist_id}\",\n        \"starred_url\": \"https://api.github.com/users/theboringtech/starred{/owner}{/repo}\",\n        \"subscriptions_url\": \"https://api.github.com/users/theboringtech/subscriptions\",\n        \"organizations_url\": \"https://api.github.com/users/theboringtech/orgs\",\n        \"repos_url\": \"https://api.github.com/users/theboringtech/repos\",\n        \"events_url\": \"https://api.github.com/users/theboringtech/events{/privacy}\",\n        \"received_events_url\": \"https://api.github.com/users/theboringtech/received_events\",\n        \"type\": \"Organization\",\n        \"site_admin\": false\n      },\n      \"html_url\": \"https://github.com/theboringtech/theboringtech.github.io\",\n      \"description\": \"The boring website\",\n      \"fork\": false,\n      \"url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io\",\n      \"forks_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/forks\",\n      \"keys_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/keys{/key_id}\",\n      \"collaborators_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/collaborators{/collaborator}\",\n      \"teams_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/teams\",\n      \"hooks_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/hooks\",\n      \"issue_events_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/issues/events{/number}\",\n      \"events_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/events\",\n      \"assignees_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/assignees{/user}\",\n      \"branches_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/branches{/branch}\",\n      \"tags_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/tags\",\n      \"blobs_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/git/blobs{/sha}\",\n      \"git_tags_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/git/tags{/sha}\",\n      \"git_refs_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/git/refs{/sha}\",\n      \"trees_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/git/trees{/sha}\",\n      \"statuses_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/statuses/{sha}\",\n      \"languages_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/languages\",\n      \"stargazers_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/stargazers\",\n      \"contributors_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/contributors\",\n      \"subscribers_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/subscribers\",\n      \"subscription_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/subscription\",\n      \"commits_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/commits{/sha}\",\n      \"git_commits_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/git/commits{/sha}\",\n      \"comments_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/comments{/number}\",\n      \"issue_comment_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/issues/comments{/number}\",\n      \"contents_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/contents/{+path}\",\n      \"compare_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/compare/{base}...{head}\",\n      \"merges_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/merges\",\n      \"archive_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/{archive_format}{/ref}\",\n      \"downloads_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/downloads\",\n      \"issues_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/issues{/number}\",\n      \"pulls_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/pulls{/number}\",\n      \"milestones_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/milestones{/number}\",\n      \"notifications_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/notifications{?since,all,participating}\",\n      \"labels_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/labels{/name}\",\n      \"releases_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/releases{/id}\",\n      \"deployments_url\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/deployments\",\n      \"created_at\": \"2020-04-21T04:31:37Z\",\n      \"updated_at\": \"2020-06-01T13:54:53Z\",\n      \"pushed_at\": \"2020-06-01T13:54:50Z\",\n      \"git_url\": \"git://github.com/theboringtech/theboringtech.github.io.git\",\n      \"ssh_url\": \"git@github.com:theboringtech/theboringtech.github.io.git\",\n      \"clone_url\": \"https://github.com/theboringtech/theboringtech.github.io.git\",\n      \"svn_url\": \"https://github.com/theboringtech/theboringtech.github.io\",\n      \"homepage\": null,\n      \"size\": 306,\n      \"stargazers_count\": 0,\n      \"watchers_count\": 0,\n      \"language\": \"HTML\",\n      \"has_issues\": true,\n      \"has_projects\": true,\n      \"has_downloads\": true,\n      \"has_wiki\": true,\n      \"has_pages\": true,\n      \"forks_count\": 0,\n      \"mirror_url\": null,\n      \"archived\": false,\n      \"disabled\": false,\n      \"open_issues_count\": 2,\n      \"license\": null,\n      \"forks\": 0,\n      \"open_issues\": 2,\n      \"watchers\": 0,\n      \"default_branch\": \"master\"\n    }\n  },\n  \"_links\": {\n    \"self\": {\n      \"href\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/pulls/2\"\n    },\n    \"html\": {\n      \"href\": \"https://github.com/theboringtech/theboringtech.github.io/pull/2\"\n    },\n    \"issue\": {\n      \"href\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/issues/2\"\n    },\n    \"comments\": {\n      \"href\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/issues/2/comments\"\n    },\n    \"review_comments\": {\n      \"href\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/pulls/2/comments\"\n    },\n    \"review_comment\": {\n      \"href\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/pulls/comments{/number}\"\n    },\n    \"commits\": {\n      \"href\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/pulls/2/commits\"\n    },\n    \"statuses\": {\n      \"href\": \"https://api.github.com/repos/theboringtech/theboringtech.github.io/statuses/c5549e620254c3b0a56b3a8b37dea197ba0e9236\"\n    }\n  },\n  \"author_association\": \"CONTRIBUTOR\"\n}\n",
      "diffChangeType": "ADD",
      "fileHeader": {
        "identifier": "42c5f05",
        "fileNewPath": "kotlin/src/jsTest/resources/pull_request_example2.json",
        "fileOldPath": "/dev/null",
        "description": "diff --git a/kotlin/src/jsTest/resources/pull_request_example2.json b/kotlin/src/jsTest/resources/pull_request_example2.json\nnew file mode 100644\nindex 0000000..42c5f05\n--- /dev/null\n+++ b/kotlin/src/jsTest/resources/pull_request_example2.json\n",
        "editList": [
          {
            "beginA": 0,
            "beginB": 0,
            "endA": 0,
            "endB": 324,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 324
          }
        ]
      }
    },
    {
      "rawTextOld": "package io.btc.supercr.api\n\nimport APP_NAME\nimport HOME\nimport io.btc.supercr.db.ProjectRepository\nimport io.btc.supercr.git.GitProject\nimport io.btc.supercr.git.GitUtils\nimport io.ktor.application.Application\nimport io.ktor.application.call\nimport io.ktor.application.install\nimport io.ktor.features.CallLogging\nimport io.ktor.features.ContentNegotiation\nimport io.ktor.features.DefaultHeaders\nimport io.ktor.jackson.jackson\nimport io.ktor.response.respond\nimport io.ktor.routing.Routing\nimport io.ktor.routing.get\nimport io.ktor.server.engine.embeddedServer\nimport io.ktor.server.netty.Netty\nimport org.jdbi.v3.core.Jdbi\nimport org.jdbi.v3.core.kotlin.KotlinPlugin\nimport org.jdbi.v3.sqlite3.SQLitePlugin\nimport org.jdbi.v3.sqlobject.kotlin.KotlinSqlObjectPlugin\nimport org.slf4j.event.Level\nimport java.io.File\n\n\nclass ApiServer constructor(\n\n) {\n    init {\n        embeddedServer(Netty, 8081, watchPaths = listOf(\"ApiServerInitKt\"), module = Application::superCrServerProduction)\n            .start()\n    }\n\n}\n\nfun Application.superCrServerProduction() {\n    this.superCrServer(initDb())\n}\n\nfun Application.superCrServer(jdbi: Jdbi) {\n    install(DefaultHeaders)\n    install(CallLogging) {\n        level = Level.INFO\n    }\n    install(ContentNegotiation) {\n        jackson {\n\n        }\n    }\n    install(Routing) {\n        get(\"/\") {\n            call.respond(mapOf(\"OK\" to true))\n        }\n        ProjectApi(this, GitProject(GitUtils(), ProjectRepository(jdbi)))\n    }\n}\n\nfun initDb(dbName: String = \"supercrdb\"): Jdbi {\n    val userHome = System.getenv(HOME)\n    val superCrDirectory = \"$userHome/.$APP_NAME\"\n        .also {\n            File(it).mkdirs()\n        }\n\n    return Jdbi.create(\"jdbc:sqlite:$superCrDirectory/${dbName}.db\")\n        .installPlugin(SQLitePlugin())\n        .installPlugin(KotlinPlugin())\n        .installPlugin(KotlinSqlObjectPlugin())\n        .also { jdbi ->\n            jdbi.runMigrations()\n        }\n}\n\ninternal fun Jdbi.runMigrations() {\n    this.useTransaction<RuntimeException> { handle ->\n        handle.createUpdate(\"\"\"\n                CREATE TABLE IF NOT EXISTS project(name TEXT, localPath TEXT, providerPath TEXT)\n            \"\"\".trimIndent())\n            .execute()\n    }\n}\n",
      "rawTextNew": "package io.btc.supercr.api\n\nimport APP_NAME\nimport DEFAULT_PORT\nimport HOME\nimport io.btc.supercr.db.ProjectRepository\nimport io.btc.supercr.git.GitProject\nimport io.btc.supercr.git.GitUtils\nimport io.ktor.application.Application\nimport io.ktor.application.call\nimport io.ktor.application.install\nimport io.ktor.features.CORS\nimport io.ktor.features.CallLogging\nimport io.ktor.features.ContentNegotiation\nimport io.ktor.features.DefaultHeaders\nimport io.ktor.response.respond\nimport io.ktor.routing.Routing\nimport io.ktor.routing.get\nimport io.ktor.serialization.json\nimport io.ktor.server.engine.embeddedServer\nimport io.ktor.server.netty.Netty\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.json.JsonConfiguration\nimport org.jdbi.v3.core.Jdbi\nimport org.jdbi.v3.core.kotlin.KotlinPlugin\nimport org.jdbi.v3.sqlite3.SQLitePlugin\nimport org.jdbi.v3.sqlobject.kotlin.KotlinSqlObjectPlugin\nimport org.slf4j.event.Level\nimport java.io.File\n\n\nclass ApiServer constructor(\n\n) {\n    init {\n        embeddedServer(Netty, DEFAULT_PORT, watchPaths = listOf(\"ApiServerInitKt\"), module = Application::superCrServerProduction)\n            .start()\n    }\n\n}\n\nfun Application.superCrServerProduction() {\n    this.superCrServer(initDb())\n}\n\nfun Application.superCrServer(jdbi: Jdbi) {\n    install(DefaultHeaders)\n    install(CallLogging) {\n        level = Level.INFO\n    }\n    install(ContentNegotiation) {\n        json(json = Json(JsonConfiguration.Stable.copy(ignoreUnknownKeys = true)))\n    }\n    install(Routing) {\n        get(\"/\") {\n            call.respond(mapOf(\"OK\" to true))\n        }\n        ProjectApi(this, GitProject(GitUtils(), ProjectRepository(jdbi)))\n    }\n    install(CORS) {\n        host(\"localhost:8080\")\n        allowNonSimpleContentTypes = true\n    }\n}\n\nfun initDb(dbName: String = \"supercrdb\"): Jdbi {\n    val userHome = System.getenv(HOME)\n    val superCrDirectory = \"$userHome/.$APP_NAME\"\n        .also {\n            File(it).mkdirs()\n        }\n\n    return Jdbi.create(\"jdbc:sqlite:$superCrDirectory/${dbName}.db\")\n        .installPlugin(SQLitePlugin())\n        .installPlugin(KotlinPlugin())\n        .installPlugin(KotlinSqlObjectPlugin())\n        .also { jdbi ->\n            jdbi.runMigrations()\n        }\n}\n\ninternal fun Jdbi.runMigrations() {\n    this.useTransaction<RuntimeException> { handle ->\n        handle.createUpdate(\"\"\"\n                CREATE TABLE IF NOT EXISTS project(name TEXT, localPath TEXT, providerPath TEXT)\n            \"\"\".trimIndent())\n            .execute()\n    }\n}\n",
      "diffChangeType": "MODIFY",
      "fileHeader": {
        "identifier": "ca49177",
        "fileNewPath": "kotlin/src/jvmMain/kotlin/io/btc/supercr/api/ApiServer.kt",
        "fileOldPath": "kotlin/src/jvmMain/kotlin/io/btc/supercr/api/ApiServer.kt",
        "description": "diff --git a/kotlin/src/jvmMain/kotlin/io/btc/supercr/api/ApiServer.kt b/kotlin/src/jvmMain/kotlin/io/btc/supercr/api/ApiServer.kt\nindex 78de02f..ca49177 100644\n--- a/kotlin/src/jvmMain/kotlin/io/btc/supercr/api/ApiServer.kt\n+++ b/kotlin/src/jvmMain/kotlin/io/btc/supercr/api/ApiServer.kt\n",
        "editList": [
          {
            "beginA": 3,
            "beginB": 3,
            "endA": 3,
            "endB": 4,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 1
          },
          {
            "beginA": 10,
            "beginB": 11,
            "endA": 10,
            "endB": 12,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 1
          },
          {
            "beginA": 13,
            "beginB": 15,
            "endA": 14,
            "endB": 15,
            "editType": "DELETE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 0
          },
          {
            "beginA": 17,
            "beginB": 18,
            "endA": 17,
            "endB": 19,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 1
          },
          {
            "beginA": 19,
            "beginB": 21,
            "endA": 19,
            "endB": 23,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 2
          },
          {
            "beginA": 31,
            "beginB": 35,
            "endA": 32,
            "endB": 36,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          },
          {
            "beginA": 47,
            "beginB": 51,
            "endA": 50,
            "endB": 52,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 3,
            "lengthB": 1
          },
          {
            "beginA": 57,
            "beginB": 59,
            "endA": 57,
            "endB": 63,
            "editType": "INSERT",
            "isEmpty": false,
            "lengthA": 0,
            "lengthB": 4
          }
        ]
      }
    },
    {
      "rawTextOld": "package io.btc.supercr.api\n\nimport codereview.Project\nimport io.btc.supercr.git.GitProject\nimport io.btc.supercr.git.checkOrFetchRef\nimport io.btc.supercr.git.fetchRef\nimport io.btc.supercr.git.formatDiff\nimport io.ktor.application.call\nimport io.ktor.http.HttpStatusCode\nimport io.ktor.request.receive\nimport io.ktor.response.respond\nimport io.ktor.routing.Routing\nimport io.ktor.routing.get\nimport io.ktor.routing.post\nimport io.ktor.routing.route\n\nclass ProjectApi constructor(\n    routing: Routing,\n    private val gitProject: GitProject\n): ApiController(routing) {\n\n    override fun initRoutes(routing: Routing) {\n        routing {\n            route(\"/projects\")  {\n                get(\"_all\") {\n                    call.respond(gitProject.getAllProjects())\n                }\n                post {\n                    with(call.receive<Project>()) {\n                        gitProject.addProject(this)\n                    }\n                    call.respond(mapOf(\"OK\" to true))\n                }\n                route(\"{id}\") {\n                    get {\n                        val id = call.parameters[\"id\"]!!\n                        val responseProject = (gitProject[id]?.first)\n                            ?: Project(providerPath = \"Not found\", localPath = id, name = \"NA\")\n                        call.respond(responseProject)\n                    }\n                    post(\"fetch/{ref}\") {\n                        val (project, git) = gitProject[call.parameters[\"id\"]!!] ?: Pair(null, null)\n                        when(project) {\n                            null -> call.respond(HttpStatusCode.NotFound)\n                            else -> {\n                                val ref = call.parameters[\"ref\"]!!\n                                if (git!!.fetchRef(ref)) {\n                                    call.respond(HttpStatusCode.Accepted)\n                                } else {\n                                    call.respond(HttpStatusCode.NotFound)\n                                }\n                            }\n                        }\n                    }\n                    get(\"diff\") {\n                        val oldRef = call.request.queryParameters[\"oldRef\"]\n                        val newRef = call.request.queryParameters[\"newRef\"]\n                        val (project, git) = gitProject[call.parameters[\"id\"]!!] ?: Pair(null, null)\n                        if (oldRef == null || newRef == null || project == null) {\n                            call.respond(HttpStatusCode.BadRequest)\n                        } else {\n                            val fetchedOldRef = git!!.checkOrFetchRef(oldRef)\n                            val fetchedNewRef = git.checkOrFetchRef(newRef)\n                            if(!fetchedOldRef || !fetchedNewRef) {\n                                call.respond(HttpStatusCode.NotFound)\n                            } else {\n                                call.respond(git.formatDiff(oldRef, newRef))\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n",
      "rawTextNew": "package io.btc.supercr.api\n\nimport codereview.Project\nimport io.btc.supercr.git.GitProject\nimport io.btc.supercr.git.checkOrFetchRef\nimport io.btc.supercr.git.fetchRef\nimport io.btc.supercr.git.formatDiff\nimport io.ktor.application.call\nimport io.ktor.http.HttpStatusCode\nimport io.ktor.request.receive\nimport io.ktor.response.respond\nimport io.ktor.routing.Routing\nimport io.ktor.routing.get\nimport io.ktor.routing.post\nimport io.ktor.routing.route\n\nclass ProjectApi constructor(\n    routing: Routing,\n    private val gitProject: GitProject\n): ApiController(routing) {\n\n    override fun initRoutes(routing: Routing) {\n        routing {\n            route(\"/projects\")  {\n                get(\"_all\") {\n                    call.respond(gitProject.getAllProjects())\n                }\n                post {\n                    with(call.receive<Project>()) {\n                        gitProject.addProject(this)\n                    }\n                    call.respond(HttpStatusCode.Created ,mapOf(\"OK\" to true))\n                }\n                route(\"{id}\") {\n                    get {\n                        val id = call.parameters[\"id\"]!!\n                        val responseProject = (gitProject[id]?.first)\n                            ?: Project(providerPath = \"Not found\", localPath = id, name = \"NA\")\n                        call.respond(responseProject)\n                    }\n                    post(\"fetch/{ref}\") {\n                        val (project, git) = gitProject[call.parameters[\"id\"]!!] ?: Pair(null, null)\n                        when(project) {\n                            null -> call.respond(HttpStatusCode.NotFound)\n                            else -> {\n                                val ref = call.parameters[\"ref\"]!!\n                                if (git!!.fetchRef(ref)) {\n                                    call.respond(HttpStatusCode.Accepted)\n                                } else {\n                                    call.respond(HttpStatusCode.NotFound)\n                                }\n                            }\n                        }\n                    }\n                    get(\"diff\") {\n                        val oldRef = call.request.queryParameters[\"oldRef\"]\n                        val newRef = call.request.queryParameters[\"newRef\"]\n                        val (project, git) = gitProject[call.parameters[\"id\"]!!] ?: Pair(null, null)\n                        if (oldRef == null || newRef == null || project == null) {\n                            call.respond(HttpStatusCode.BadRequest)\n                        } else {\n                            val fetchedOldRef = git!!.checkOrFetchRef(oldRef)\n                            val fetchedNewRef = git.checkOrFetchRef(newRef)\n                            if(!fetchedOldRef || !fetchedNewRef) {\n                                call.respond(HttpStatusCode.NotFound)\n                            } else {\n                                call.respond(git.formatDiff(oldRef, newRef))\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n",
      "diffChangeType": "MODIFY",
      "fileHeader": {
        "identifier": "d50c40b",
        "fileNewPath": "kotlin/src/jvmMain/kotlin/io/btc/supercr/api/ProjectApi.kt",
        "fileOldPath": "kotlin/src/jvmMain/kotlin/io/btc/supercr/api/ProjectApi.kt",
        "description": "diff --git a/kotlin/src/jvmMain/kotlin/io/btc/supercr/api/ProjectApi.kt b/kotlin/src/jvmMain/kotlin/io/btc/supercr/api/ProjectApi.kt\nindex f53b999..d50c40b 100644\n--- a/kotlin/src/jvmMain/kotlin/io/btc/supercr/api/ProjectApi.kt\n+++ b/kotlin/src/jvmMain/kotlin/io/btc/supercr/api/ProjectApi.kt\n",
        "editList": [
          {
            "beginA": 31,
            "beginB": 31,
            "endA": 32,
            "endB": 32,
            "editType": "REPLACE",
            "isEmpty": false,
            "lengthA": 1,
            "lengthB": 1
          }
        ]
      }
    }
  ]
}
